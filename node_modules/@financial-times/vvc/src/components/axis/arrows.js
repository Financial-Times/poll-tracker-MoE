/**
 * @file
 * vv-axis arrows and label
 */

import React from 'react';
import { Group } from '@visx/group';
import { Line } from '@visx/shape';
import { Point } from '@visx/point';
import { axisArrowsStyles as css } from './styles-arrows';
import { axisArrowsComponentPropTypes } from '../prop-types';
import { axisArrowsComponentDefaultProps } from '../default-props';

const AxisArrows = ({ axisArrows, axisArrowsScale, axisArrowsPadding, orientation }) => {
  const {
    // top: paddingTop,
    right: paddingRight,
    // bottom: paddingBottom,
    left: paddingLeft,
  } = axisArrowsPadding;
  const labelArrowGap = 10; // vertical gap between the arrow and its label on AxisTop
  const labelArrowGapBottom = 20; // vertical gap between the arrow and its label on AxisBottom
  const axisHeight = 35; // @TODO calculate this better?

  return (
    <Group css={css}>
      <defs>
        <marker
          id="axis-arrow-triangle"
          viewBox="0 0 8 8"
          refX="1"
          refY="4"
          markerUnits="strokeWidth"
          markerWidth="8"
          markerHeight="8"
          orient="auto"
        >
          <path d="M 0 0 L 8 4 L 0 8 z" />
        </marker>
      </defs>
      {axisArrows.map(({ value, startValue, direction, length }) => {
        return (
          <Group
            key={`visx-axis-arrows--${value}`}
            transform={`translate(${direction === 'right' ? paddingLeft : -paddingRight}, ${
              orientation === 'top' ? -axisHeight : axisHeight
            })`}
          >
            <Line
              from={new Point({ x: axisArrowsScale(startValue), y: 0 })}
              to={
                new Point({
                  x:
                    direction === 'right'
                      ? axisArrowsScale(startValue) + length
                      : axisArrowsScale(startValue) - length,
                  y: 0,
                })
              }
              markerEnd="url(#axis-arrow-triangle)"
            />
            <text>
              <tspan
                key={`text_${value}`}
                x={axisArrowsScale(startValue)}
                y={orientation === 'top' ? -labelArrowGap : labelArrowGapBottom}
                textAnchor={direction === 'right' ? 'start' : 'end'}
              >
                {value}
              </tspan>
            </text>
          </Group>
        );
      })}
    </Group>
  );
};

AxisArrows.propTypes = axisArrowsComponentPropTypes;
AxisArrows.defaultProps = axisArrowsComponentDefaultProps;

export default AxisArrows;
