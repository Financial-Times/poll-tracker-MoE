/**
 * @file
 * Base component for chart-frame
 */
import React, { useReducer, Children, isValidElement, cloneElement } from 'react';
import { Group } from '@visx/group';
import { useTooltip } from '@visx/tooltip';
import { ParentSize } from '@visx/responsive';
import TooltipWithBounds from '../tooltip';
import ChartTopper from '../chart-topper';
import ChartFooter from '../chart-footer';
import { getResponsiveValues, stripHTMLTags } from '../../util';
import { frameStyles } from './styles';
import { framePropTypes } from '../prop-types';
import { frameDefaultProps } from '../default-props';
import { PlotContext } from './plot-context';

const Frame = ({
  background,
  children,
  description,
  watermark: Watermark,
  watermarkOffset,
  // Base
  margin,
  width,
  height,
  padding,
  // <ChartFrame />
  type,
  // <ChartTopper />
  stabRule,
  subtitle,
  subtitleFontSize,
  subtitleLineHeight,
  subtitleMarkupCustom,
  subtitlePosition,
  subtitleStylesCustom,
  title,
  titleFontSize,
  titleLineHeight,
  titleMarkupCustom,
  titlePosition,
  titleStylesCustom,
  // <ChartFooter />
  copyright,
  source,
  sourceFontSize,
  sourceLineHeight,
  sourcePlotYOffset,
  sourcePosition,
  hideTitleTooltip,
  hideTopper,
  hideFooter,
  // Tooltip
  tooltipStyle,
  tooltipComponent,
  ...props
}) => {
  const { tooltipData, tooltipLeft, tooltipTop, tooltipOpen, ...tooltipFunctions } = useTooltip();
  const [paddingState, updatePaddingState] = useReducer(
    (currentPadding, newPadding) => ({
      ...currentPadding,
      ...newPadding,
    }),
    padding
  );

  // Creates a hopefully unique id for the aria-labelledby value
  const a11yDescription =
    description ||
    (subtitle
      ? `Chart of ${stripHTMLTags(subtitle)} ${title ? `showing ${stripHTMLTags(title)}` : ''}`
      : 'A Financial Times chart');
  const uniqueA11yTitleDescPrefix = `ft-webgraphic-${type}__chart-a11y-${encodeURI(
    (description || subtitle || '').toLowerCase().replace(/[^a-zA-Z0-9]+/g, '')
  )}`;

  return (
    <>
      <ParentSize>
        {({ width: parentWidth }) => {
          // Gets various values based on width
          const {
            height: responsiveHeight,
            margin: responsiveMargin,
            sourceFontSize: responsiveSourceFontSize,
            sourceLineHeight: responsiveSourceLineHeight,
            tickLength,
            subtitleFontSize: responsiveSubtitleFontSize,
            subtitleLineHeight: responsiveSubtitleLineHeight,
            subtitlePosition: responsiveSubtitlePosition,
            titleFontSize: responsiveTitleFontSize,
            titleLineHeight: responsiveTitleLineHeight,
            titlePosition: responsiveTitlePosition,
            width: responsiveWidth,
          } = getResponsiveValues(width || parentWidth, {
            topper: !hideTopper,
            footer: !hideFooter,
          });

          // Use dimensions from props when they are truthy; otherwise use responsive values
          const svgWidth = width || responsiveWidth;
          const svgHeight = height || responsiveHeight;
          const plotMargin = margin || responsiveMargin;

          // Use font sizes from props when they are truthy; otherwise use responsive values
          const renderSourceFontSize = sourceFontSize || responsiveSourceFontSize;
          const renderSourceLineHeight = sourceLineHeight || responsiveSourceLineHeight;
          const renderSubtitleFontSize = subtitleFontSize || responsiveSubtitleFontSize;
          const renderSubtitleLineHeight = subtitleLineHeight || responsiveSubtitleLineHeight;
          const renderSubtitlePosition = subtitlePosition || responsiveSubtitlePosition;
          const renderTitleFontSize = titleFontSize || responsiveTitleFontSize;
          const renderTitleLineHeight = titleLineHeight || responsiveTitleLineHeight;
          const renderTitlePosition = titlePosition || responsiveTitlePosition;

          // Calculate inner (plot) dimensions
          const plotPadding = paddingState;
          const innerWidth =
            svgWidth -
            (plotMargin.left + plotPadding.left) -
            (plotMargin.right + plotPadding.right);
          const innerHeight =
            svgHeight -
            (plotMargin.top + plotPadding.top) -
            (plotMargin.bottom + plotPadding.bottom);

          return (
            <PlotContext.Provider
              value={{
                frameWidth: svgWidth,
                frameHeight: svgHeight,
                width: innerWidth,
                height: innerHeight,
                margin: plotMargin,
                padding: paddingState,
                tickLength,
                type,
                updatePadding: (newPadding = {}) => updatePaddingState(newPadding),
                ...tooltipFunctions,
                hoveredSeries: tooltipData && !tooltipData.data && tooltipData.seriesName,
                hoveredData: tooltipData && tooltipData.data,
                mousePoint: tooltipData && tooltipData.mousePoint,
              }}
            >
              <svg
                aria-labelledby={`${uniqueA11yTitleDescPrefix}-title ${uniqueA11yTitleDescPrefix}-desc`}
                css={frameStyles}
                fontFamily="MetricWeb,sans-serif"
                height={svgHeight}
                role="img"
                viewBox={`0 0 ${svgWidth} ${svgHeight}`}
                width={svgWidth}
                {
                  ...props /* @TODO this line is throwing lots of warnings */
                }
              >
                {
                  hideTitleTooltip && (
                    <title />
                  ) /* This prevent tooltips on hover; see https://stackoverflow.com/a/57971234/467760 */
                }

                <title id={`${uniqueA11yTitleDescPrefix}-title`}>
                  {titleMarkupCustom ? stripHTMLTags(title) : title}
                </title>

                <desc id={`${uniqueA11yTitleDescPrefix}-desc`}>{a11yDescription}</desc>

                {background && (
                  <rect
                    data-id="chart-background"
                    fill={background}
                    height={svgHeight}
                    role="presentation"
                    width={svgWidth}
                    x="0"
                    y="0"
                  />
                )}

                {!hideTopper && (
                  <ChartTopper
                    height={svgHeight}
                    margin={plotMargin}
                    stabRule={stabRule}
                    subtitle={subtitle}
                    subtitleFontSize={renderSubtitleFontSize}
                    subtitleLineHeight={renderSubtitleLineHeight}
                    subtitleMarkupCustom={subtitleMarkupCustom}
                    subtitlePosition={renderSubtitlePosition}
                    subtitleStylesCustom={subtitleStylesCustom}
                    title={title}
                    titleFontSize={renderTitleFontSize}
                    titleLineHeight={renderTitleLineHeight}
                    titleMarkupCustom={titleMarkupCustom}
                    titlePosition={renderTitlePosition}
                    titleStylesCustom={titleStylesCustom}
                    type={type}
                    width={svgWidth}
                  />
                )}

                <Group
                  className="chart-plot"
                  role="presentation"
                  transform={`translate(${plotMargin.left + plotPadding.left}, ${
                    plotMargin.top + plotPadding.top
                  })`}
                >
                  {Children.map(children, (child) => {
                    if (!isValidElement(child)) {
                      return null;
                    }

                    return cloneElement(child, {
                      width: innerWidth,
                      height: innerHeight,
                      margin: plotMargin,
                      padding: plotPadding,
                      type,
                    });
                  })}
                </Group>

                {!hideFooter && (
                  <ChartFooter
                    copyright={copyright}
                    height={svgHeight}
                    margin={plotMargin}
                    source={source}
                    sourceFontSize={renderSourceFontSize}
                    sourceLineHeight={renderSourceLineHeight}
                    sourcePlotYOffset={sourcePlotYOffset}
                    sourcePosition={sourcePosition}
                    type={type}
                    width={svgWidth}
                  />
                )}

                {Watermark && (
                  <Group
                    className="chart-watermark"
                    role="presentation"
                    transform={`translate(${width - Watermark.width - watermarkOffset.x}, ${
                      height - Watermark.height - watermarkOffset.y
                    }) scale(1)`}
                  >
                    {
                      React.createElement(
                        Watermark
                      ) /* JSX does not like it when this is a boolean */
                    }
                  </Group>
                )}
              </svg>
            </PlotContext.Provider>
          );
        }}
      </ParentSize>
      {tooltipOpen && tooltipData && tooltipData.content && (
        <TooltipWithBounds
          // set this to random so it correctly updates with parent bounds
          key={Math.random()}
          top={tooltipTop}
          left={tooltipLeft}
          offsetTop={0}
          offsetLeft={0}
          style={{ ...tooltipStyle, pointerEvents: 'none' }}
          // @TODO should this be an option?
          offsetX="-50%"
          offsetY="-50%"
          dataYPosition={tooltipData.dataYPosition}
          maxOffsetY={tooltipData.maxOffsetY}
        >
          {tooltipComponent(tooltipData.content)}
        </TooltipWithBounds>
      )}
    </>
  );
};

Frame.propTypes = framePropTypes;
Frame.defaultProps = frameDefaultProps;

export default Frame;
