import React, { createElement } from 'react';
import { Group } from '@visx/group';
import { css } from '@emotion/core';
import {
  goalpostsStyles,
  stabRuleStyles,
  stabRuleStylesSocial,
  subtitleStylesBase,
  subtitleStylesPrint,
  subtitleStylesSocial,
  subtitleStylesVideo,
  titleStylesBase,
  titleStylesPrint,
  titleStylesSocial,
  titleStylesVideo,
} from './styles';
import { chartTopperPropTypes } from '../prop-types';
import { chartTopperDefaultProps } from '../default-props';

const titleStylesMap = {
  print: titleStylesPrint,
  social: titleStylesSocial,
  video: titleStylesVideo,
  web: null,
};
const subtitleStylesMap = {
  print: subtitleStylesPrint,
  social: subtitleStylesSocial,
  video: subtitleStylesVideo,
  web: null,
};

const ChartTopper = ({
  height,
  margin,
  stabRule,
  subtitle,
  subtitleFontSize,
  subtitleLineHeight,
  subtitleMarkupCustom,
  subtitlePosition,
  subtitleStylesCustom,
  title,
  titleFontSize,
  titleLineHeight,
  titleMarkupCustom,
  titlePosition,
  titleStylesCustom,
  type,
  width,
}) => {
  return (
    <Group>
      {/* Stab rule */}
      {typeof stabRule === 'boolean' && stabRule ? (
        <rect
          css={
            type === 'social'
              ? css`
                  ${stabRuleStylesSocial};
                  transform: translate(${margin.left}px, ${margin.left}px);
                `
              : stabRuleStyles
          }
          data-id="accent-bar"
          height="4"
          width="60"
        />
      ) : (
        stabRule && createElement(stabRule)
      )}

      {/* Goalposts for print */}
      {type === 'print' && (
        <path
          css={goalpostsStyles}
          d={[
            `M 0, ${height} L ${width}, ${height}`,
            `M 0, 15 L 0, 0 L ${width}, 0 L ${width}, 15`,
          ]}
        />
      )}

      {/* Title */}
      <text
        css={css`
          font-size: ${titleFontSize}px;
          ${titleStylesBase};
          ${titleStylesMap[type]};
          ${titleStylesCustom};
        `}
        data-id={`ft-webgraphic-${type}__title`}
      >
        {title && !titleMarkupCustom
          ? title.split('|').map((line, i) => (
              <tspan
                data-id={`ft-webgraphic-${type}__title-line-${i}`}
                key={`ft-webgraphic-${type}__title-line-${i}`} // eslint-disable-line react/no-array-index-key
                x={titlePosition.x}
                y={titlePosition.y + i * titleLineHeight}
              >
                {line}
              </tspan>
            ))
          : title &&
            title.split('|').map((line, i) => (
              <tspan
                dangerouslySetInnerHTML={{ __html: line }} // eslint-disable-line react/no-danger
                data-id={`ft-webgraphic-${type}__title-line-${i}`}
                key={`ft-webgraphic-${type}__title-line-${i}`} // eslint-disable-line react/no-array-index-key
                x={titlePosition.x}
                y={titlePosition.y + i * titleLineHeight}
              />
            ))}
      </text>

      {/* Subtitle */}
      <text
        css={css`
          font-size: ${subtitleFontSize}px;
          ${subtitleStylesBase};
          ${subtitleStylesMap[type]};
          ${subtitleStylesCustom};
        `}
        data-id={`ft-webgraphic-${type}__subtitle`}
      >
        {subtitle && !subtitleMarkupCustom
          ? subtitle.split('|').map((line, i) => (
              <tspan
                data-id={`ft-webgraphic-${type}__subtitle-line-${i}`}
                key={`ft-webgraphic-${type}__subtitle-line-${i}`} // eslint-disable-line react/no-array-index-key
                x={subtitlePosition.x}
                y={
                  title && title.split('|').length > 1
                    ? subtitlePosition.y +
                      (title.split('|').length - 1) * titleLineHeight +
                      i * subtitleLineHeight
                    : subtitlePosition.y + i * subtitleLineHeight
                }
              >
                {line}
              </tspan>
            ))
          : subtitle &&
            subtitle.split('|').map((line, i) => (
              <tspan
                dangerouslySetInnerHTML={{ __html: line }}
                data-id={`ft-webgraphic-${type}__subtitle-line-${i}`}
                key={`ft-webgraphic-${type}__subtitle-line-${i}`} // eslint-disable-line react/no-array-index-key
                x={subtitlePosition.x}
                y={
                  title && title.split('|').length > 1
                    ? subtitlePosition.y +
                      (title.split('|').length - 1) * titleLineHeight +
                      i * subtitleLineHeight
                    : subtitlePosition.y + i * subtitleLineHeight
                }
              />
            ))}
      </text>
    </Group>
  );
};

ChartTopper.propTypes = chartTopperPropTypes;
ChartTopper.defaultProps = chartTopperDefaultProps;

export default ChartTopper;
