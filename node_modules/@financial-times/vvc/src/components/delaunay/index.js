import React, { useContext } from 'react';
import { Circle, LinePath } from '@visx/shape';
import { PlotContext } from '../chart-frame/plot-context';
import { useDelaunay } from './delaunay';
import { useTooltipEvents } from '../../util/hooks';
import { delaunayPropTypes } from '../prop-types';
import { delaunayDefaultProps } from '../default-props';

const DelaunayListener = ({ width, height, margin, padding, onMouseMove, onMouseOut }) => {
  const top = margin.top + padding.top;
  const left = margin.left + padding.left;

  return (
    <>
      <rect
        width={width}
        height={height}
        fill="transparent"
        onMouseMove={event => onMouseMove(event, { top, left, height })}
        onMouseOut={onMouseOut}
      />
    </>
  );
};

const Delaunay = ({
  xScale,
  yScale,
  colorScale,
  yTransformFunction,
  xVariable,
  yVariable,
  data,
  debug,
  tooltipPositionOverride,
  showLine,
  showCircle,
  lineConfig,
  circleConfig,
  hoverRadius,
}) => {
  const { width, height, margin, padding, updateTooltip, hoveredData, mousePoint } = useContext(
    PlotContext
  );
  xScale.range([0, width]);
  yScale.range([height, 0]);

  const transformedYScale = y => yScale(yTransformFunction ? yTransformFunction(y) : y);

  const tooltipEvents = useTooltipEvents({ enabled: true, updateTooltip });

  const { onMouseMove, onMouseOut, pathString } = useDelaunay({
    width,
    height,
    xScale,
    yScale: transformedYScale,
    xVariable,
    yVariable,
    yTransformFunction,
    data,
    tooltipEvents,
    tooltipPositionOverride,
    hoverRadius,
    debug,
  });

  const hoveredXPosition = hoveredData && xScale(hoveredData.x);
  const hoveredYPosition =
    hoveredData && yScale(yTransformFunction ? yTransformFunction(hoveredData.y) : hoveredData.y);

  return (
    width > 0 &&
    height > 0 && (
      <>
        {showLine && hoveredData && (
          <LinePath
            data={[
              { x: hoveredXPosition, y: 0 },
              { x: hoveredXPosition, y: height },
            ]}
            x={({ x }) => x}
            y={({ y }) => y}
            {...lineConfig}
          />
        )}
        {showCircle && hoveredData && (
          <Circle
            fill={colorScale(hoveredData.seriesName)}
            cx={hoveredXPosition}
            cy={hoveredYPosition}
            {...circleConfig}
          />
        )}
        <DelaunayListener
          width={width}
          height={height}
          margin={margin}
          padding={padding}
          onMouseMove={onMouseMove}
          onMouseOut={onMouseOut}
          debug={debug}
        />
        {debug && <path d={pathString} fill="none" stroke="red" pointerEvents="none" />}
        {debug && hoverRadius && mousePoint && (
          <Circle
            fill="none"
            stroke="red"
            strokeDasharray="4,1"
            pointerEvents="none"
            r={hoverRadius}
            cx={mousePoint.mx}
            cy={mousePoint.my}
          />
        )}
      </>
    )
  );
};

Delaunay.propTypes = delaunayPropTypes;

Delaunay.defaultProps = delaunayDefaultProps;

export default Delaunay;
