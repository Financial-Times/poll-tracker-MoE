import React from 'react';
import PropTypes from 'prop-types';
import { Group } from '@visx/group';
import { Bar, Line, Circle } from '@visx/shape';
import { Label } from './label';
import { approximateTextSize } from '../../util/victory-textsize';


export const legendCategorical = ({ posX, posY, scale, seriesNames, orientation, geometry, fontSize }) => {
  if (orientation === 'vertical') {
    return seriesNames.map((d, i) => {
      const textHeight = approximateTextSize(d, {
        fontFamily: 'MetricWeb-Regular',
        fontSize: fontSize,
      }).height
      const barWidth = textHeight * 0.9;
      const barHeight = textHeight * 0.6
      const diametre = textHeight * 0.6;
      const radius = diametre* 0.5;

      if (geometry === 'rect') {
        const yOffset = (textHeight * 0.01)
        const xOffset = (textHeight * 1.3)
        return (
          <Group key={d} className="legend">
            <Bar
              fill={scale(d)}
              x={0}
              y={i * (textHeight + yOffset)}
              width={barWidth}
              height={barHeight}
            />
            <Label x={xOffset} y={(i * (textHeight + yOffset)) + (barHeight - yOffset)} category={d} />
          </Group>
        );
      }
      if (geometry === 'circle') {
        const yOffset = (textHeight * 0.01)
        const xOffset = (textHeight * 1)
        return (
          <Group key={d} className="legend">
            <Circle
              fill={scale(d)}
              cx={radius}
              cy={i * (textHeight + yOffset) + radius}
              r={radius}
            />
            <Label x={xOffset} y={(i * (textHeight + yOffset)) + (diametre - yOffset)} category={d} />
          </Group>
        );
      }
      if (geometry === 'line') {
        const yOffset = (textHeight * 0.01)
        const xOffset = (textHeight * 1.3)
        return (
          <Group key={d} className="legend">
            <Line
              stroke={scale(d)}
              x1={0}
              y1={i * (textHeight + yOffset) + (barHeight * 0.5)}
              x2={barWidth}
              y2={i * (textHeight + yOffset) + (barHeight * 0.5)}
            />
            <Label x={xOffset} y={(i * (textHeight + yOffset)) + (barHeight - yOffset)} category={d} />
          </Group>
        );
      }

      return undefined;
    });
  }

  if (orientation === 'horizontal') {
    let cummulative = 0
    let labelWidth;
    return seriesNames.map((d, i) => {
      const textHeight = approximateTextSize(d, {
        fontFamily: 'MetricWeb-Regular',
        fontSize: fontSize,
      });
      const barWidth = textHeight.height * 0.9;
      const barHeight = textHeight.height * 0.6;
      const diametre = textHeight.height * 0.6;
      const radius = diametre * 0.5;

      if (geometry === 'rect') {
        const xOffset = (barWidth * 1.3)
        const yOffset = (textHeight.height * 0.01)
        const newX = cummulative;
        labelWidth = textHeight.width;
        cummulative = cummulative + xOffset + labelWidth +(xOffset * 0.7);
        return (
          <Group key={d} className="legend">
            <Bar
              fill={scale(d)}
              x={newX}
              y={0}
              width={barWidth}
              height={barHeight}
            />
            <Label x={newX + xOffset} y={barHeight - yOffset} category={d} />
          </Group>
        );
      }
      if (geometry === 'circle') {
        const xOffset = (diametre * 1.1)
        const yOffset = (textHeight.height * 0.01)
        const newX = cummulative;
        labelWidth = textHeight.width;
        cummulative = cummulative + xOffset + labelWidth +(xOffset *1.2);
        return (
          <Group key={d} className="legend">
            <Circle fill={scale(d)} cx={newX} cy={radius} r={radius} />
            <Label x={newX + xOffset} y={barHeight - yOffset} category={d} />
          </Group>
        );
      }
      if (geometry === 'line') {
        const xOffset = (barWidth * 1.3)
        const yOffset = (textHeight.height * 0.01)
        const newX = cummulative;
        labelWidth = textHeight.width;
        cummulative = cummulative + xOffset + labelWidth +(xOffset * 0.7);
        return (
          <Group key={d} className="legend">
            <Line
              stroke={scale(d)}
              x1={newX}
              y1={ (barHeight * 0.55)}
              x2={newX + barWidth}
              y2={(barHeight * 0.55)}
            />
            <Label x={newX + xOffset} y={barHeight - yOffset} category={d} />
          </Group>
        );
      }
      return undefined;
    });
  }
  return null;
};
legendCategorical.propTypes = {
  scale: PropTypes.func.isRequired,
  seriesNames: PropTypes.array.isRequired,
  orientation: PropTypes.string.isRequired,
  geometry: PropTypes.string.isRequired,
  fontSize: PropTypes.number.isRequired,
  category: PropTypes.string,
};

export default legendCategorical;

// @TODO PropTypes
