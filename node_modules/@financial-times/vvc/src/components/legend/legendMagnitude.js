import React from 'react';
import PropTypes from 'prop-types';
import { scaleSqrt } from '@visx/scale';
import { extent } from 'd3-array';
import { Group } from '@visx/group';
import { Line, Circle } from '@visx/shape';
import { Label } from './label';

const legendMagnitude = ({ scale, seriesNames, fontSize, label }) => {
  const valueExtent = extent(scale.domain());
  const last = seriesNames.length - 1;
  const circleScale = scaleSqrt({
    domain: [0, valueExtent[1]],
    range: [0, scale.range()[1]],
  });

  const offsetY = 35;
  const offsetX = 0;

  return seriesNames.map((d, i) => {
    if (i === 0) {
      return (
        <Group key={d}>
          <Circle
            cx={offsetX + circleScale(valueExtent[1])}
            cy={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i])}
            r={circleScale(seriesNames[i])}
            fill="none"
          />
          <Line
            x1={offsetX + circleScale(valueExtent[1])}
            y1={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2}
            x2={offsetX + circleScale(valueExtent[1]) + circleScale(valueExtent[1]) + 15}
            y2={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2}
          />
          <Label
            x={offsetX + circleScale(valueExtent[1]) + circleScale(valueExtent[1]) + 20}
            y={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2 + 5}
            category={`Min ${d}`}
          />
          <Label x={0} y={fontSize * 0.2} category="Circle size shows" />
          <Label x={0} y={fontSize * 1.3} category={label} />
        </Group>
      );
    }
    if (i === last && seriesNames[i] === valueExtent[1]) {
      return (
        <Group key={d}>
          <Circle
            cx={offsetX + circleScale(valueExtent[1])}
            cy={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i])}
            r={circleScale(seriesNames[i])}
          />
          <Line
            x1={offsetX + circleScale(valueExtent[1])}
            y1={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2}
            x2={offsetX + circleScale(valueExtent[1]) + circleScale(valueExtent[1]) + 15}
            y2={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2}
          />
          <Label
            x={offsetX + circleScale(valueExtent[1]) + circleScale(valueExtent[1]) + 20}
            y={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2 + 5}
            category={`Max ${d}`}
          />
        </Group>
      );
    }
    if (i > 0 && seriesNames[i] !== valueExtent[1]) {
      return (
        <Group key={d}>
          <Circle
            cx={offsetX + circleScale(valueExtent[1])}
            cy={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i])}
            r={circleScale(seriesNames[i])}
          />
          <Line
            x1={offsetX + circleScale(valueExtent[1])}
            y1={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2}
            x2={offsetX + circleScale(valueExtent[1]) + circleScale(valueExtent[1]) + 15}
            y2={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2}
          />
          <Label
            x={offsetX + circleScale(valueExtent[1]) + circleScale(valueExtent[1]) + 20}
            y={offsetY + circleScale(valueExtent[1]) * 2 - circleScale(seriesNames[i]) * 2 + 5}
            category={d}
          />
        </Group>
      );
    }
    return undefined;
  });
};
legendMagnitude.propTypes = {
  scale: PropTypes.func.isRequired,
  seriesNames: PropTypes.array.isRequired,
  fontSize: PropTypes.number.isRequired,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  label: PropTypes.string,
};

export default legendMagnitude;

// @TODO PropTypes
