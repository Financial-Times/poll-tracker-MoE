import React from 'react';
import PropTypes, { bool, number } from 'prop-types';
import { Group } from '@visx/group';
import { scaleLinear } from '@visx/scale';
import { Polygon, Bar, Line } from '@visx/shape';
import { Label } from './label';

const legendThreshold = ({ fontSize, width, orientation, height, scale, invert, median }) => {
  const valueExtent = [scale.domain()[0], scale.domain()[scale.domain().length - 1]];
  const yAxis = scaleLinear({
    domain: [valueExtent[0], valueExtent[1]],
  });
  const seriesNames = scale.domain();

  if (orientation === 'horizontal') {
    if (invert) {
      yAxis.range([width, 0]);
      seriesNames.reverse();
    } else {
      yAxis.range([0, width]);
    }
    return seriesNames.map((d, i) => {
      if (i < seriesNames.length - 1) {
        const barWidth = yAxis(seriesNames[i + 1]) - yAxis(d);
        return (
          <g key={d} className="axis">
            <Bar x={yAxis(d)} y={0} width={barWidth} height={fontSize / 2} fill={scale(d)} />
            <Line x1={yAxis(d)} y1={0} x2={yAxis(d)} y2={fontSize} />
            <Label x={yAxis(d)} y={fontSize * 2} category={d} textAnchor="middle" />
          </g>
        );
      }
      if (i + 1 === seriesNames.length) {
        // const barWidth = yAxis(seriesNames[i + 1]) - yAxis(d);
        if (typeof median === 'string') {
          return (
            <g key={d} className="axis">
              <Line x1={yAxis(d)} y1={0} x2={yAxis(d)} y2={fontSize} />
              <Label x={yAxis(d)} y={fontSize * 2} category={d} textAnchor="middle" />
            </g>
          );
        }
        if (typeof median === 'number') {
          return (
            <Group key={d} className="axis">
              <Line x1={yAxis(d)} y1={0} x2={yAxis(d)} y2={fontSize} />
              <Label x={yAxis(d)} y={fontSize * 2} category={d} textAnchor="middle" />
              <Polygon
                className="axis"
                sides={3}
                rotate={30}
                size={fontSize / 2.5}
                center={{ x: yAxis(median), y: -fontSize / 2 }}
              />
              <Label
                x={yAxis(median)}
                y={-fontSize}
                category={`Median ${median}`}
                textAnchor="middle"
              />
            </Group>
          );
        }
      }

      return undefined;
    });
  }
  if (orientation === 'vertical') {
    if (invert) {
      yAxis.range([height, 0]);
      seriesNames.reverse();
    } else {
      yAxis.range([0, height]);
    }
    return seriesNames.map((d, i) => {
      if (i < seriesNames.length - 1) {
        const barHeight = yAxis(seriesNames[i + 1]) - yAxis(d);
        return (
          <Group key={d} className="axis">
            <Bar
              x={fontSize * 2}
              y={yAxis(d)}
              width={fontSize / 2}
              height={barHeight}
              fill={scale(d)}
            />
            <Label x={fontSize * 1.3} y={yAxis(d) + 6} category={d} textAnchor="end" />
            <Line x1={fontSize * 1.5} y1={yAxis(d)} x2={fontSize * 2.5} y2={yAxis(d)} />
          </Group>
        );
      }
      if (i + 1 === seriesNames.length) {
        if (typeof median === 'string') {
          return (
            <Group key={d} className="axis">
              <Label x={fontSize * 1.3} y={yAxis(d) + 6} category={d} textAnchor="end" />
              <Line
                x1={fontSize * 1.5}
                y1={yAxis(d)}
                x2={fontSize * 2.5}
                y2={yAxis(d)}
                stroke="#000000"
              />
            </Group>
          );
        }
        if (typeof median === 'number') {
          return (
            <Group key={d} className="axis">
              <Label x={fontSize * 1.3} y={yAxis(d) + 6} category={d} textAnchor="end" />
              <Line
                x1={fontSize * 1.5}
                y1={yAxis(d)}
                x2={fontSize * 2.5}
                y2={yAxis(d)}
                stroke="#000000"
              />
              <Polygon
                className="axis"
                sides={3}
                rotate={60}
                size={fontSize / 2.5}
                center={{ x: fontSize * 3, y: yAxis(median) }}
              />
              <Label
                x={fontSize * 3.4}
                y={yAxis(median) + fontSize * 0.35}
                category={`Median ${median}`}
                textAnchor="begin"
              />
            </Group>
          );
        }
      }

      return undefined;
    });
  }

  return null;
};

legendThreshold.propTypes = {
  invert: PropTypes.bool,
  scale: PropTypes.func.isRequired,
  seriesNames: PropTypes.array.isRequired,
  orientation: PropTypes.string.isRequired,
  geometry: PropTypes.string.isRequired,
  fontSize: PropTypes.number.isRequired,
  x: PropTypes.number,
  y: PropTypes.number,
  width: PropTypes.number,
  height: PropTypes.number,
  median: PropTypes.number,
};
export default legendThreshold;
