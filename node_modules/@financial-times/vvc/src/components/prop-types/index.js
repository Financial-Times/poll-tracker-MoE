/**
 * @file
 * Assorted prop types used throughout
 */

import PropTypes from 'prop-types';

export const marginProp = PropTypes.shape({
  top: PropTypes.number,
  right: PropTypes.number,
  bottom: PropTypes.number,
  left: PropTypes.number,
});

export const xyProp = PropTypes.shape({
  x: PropTypes.number,
  y: PropTypes.number,
});

export const frameTypes = PropTypes.oneOf([
  'Print',
  'Social',
  'Video',
  'Web',
  'print',
  'social',
  'video',
  'web',
]);

export const baseComponentPropTypes = {
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  margin: PropTypes.oneOfType([marginProp, PropTypes.bool]),
  padding: marginProp,
  type: frameTypes,
};

export const chartFramePropTypes = {
  type: frameTypes,
};

export const framePropTypes = {
  ...baseComponentPropTypes,
  ...chartFramePropTypes,
  background: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),
  description: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  hideTitleTooltip: PropTypes.bool,
  watermark: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  watermarkOffset: xyProp,
  hideTopper: PropTypes.bool,
  hideFooter: PropTypes.bool,
  tooltipStyle: PropTypes.object,
  tooltipComponent: PropTypes.func,
};

export const frameSocialPropTypes = {
  ...framePropTypes,
};

export const frameVideoPropTypes = {
  ...framePropTypes,
};

export const framePrintPropTypes = {
  ...framePropTypes,
};

export const chartTopperPropTypes = {
  ...baseComponentPropTypes,
  ...chartFramePropTypes,
  stabRule: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  subtitle: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  subtitleFontSize: PropTypes.number,
  subtitleLineHeight: PropTypes.number,
  subtitleMarkupCustom: PropTypes.bool,
  subtitlePosition: xyProp,
  subtitleStylesCustom: PropTypes.objectOf(
    PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  ),
  title: PropTypes.string,
  titleFontSize: PropTypes.number,
  titleLineHeight: PropTypes.number,
  titleMarkupCustom: PropTypes.bool,
  titlePosition: xyProp,
  titleStylesCustom: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),
};

export const chartFooterPropTypes = {
  ...baseComponentPropTypes,
  ...chartFramePropTypes,
  copyright: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  source: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  sourceFontSize: PropTypes.number,
  sourceLineHeight: PropTypes.number,
  sourcePosition: xyProp,
};

// TODO: Remove “component” from names

export const axisArrowsComponentPropTypes = {
  axisArrows: PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.arrayOf(
      PropTypes.shape({
        direction: PropTypes.oneOf(['left', 'right']),
        startValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        length: PropTypes.number,
        value: PropTypes.string,
      })
    ),
  ]),
  axisArrowsScale: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
  axisArrowsPadding: PropTypes.shape({
    top: PropTypes.number,
    right: PropTypes.number,
    bottom: PropTypes.number,
    left: PropTypes.number,
  }),
};

// @vx/axis (https://vx-demo.now.sh/static/docs/vx-axis.html)
export const axisComponentPropTypes = {
  ...baseComponentPropTypes,
  ...axisArrowsComponentPropTypes,
  axisClassName: PropTypes.string,
  axisLineClassName: PropTypes.string,
  children: PropTypes.func,
  hideAxisLine: PropTypes.bool,
  hideTicks: PropTypes.bool,
  hideZero: PropTypes.bool,
  label: PropTypes.string,
  labelClassName: PropTypes.string,
  labelOffset: PropTypes.number,
  labelProps: PropTypes.object,
  left: PropTypes.number,
  numTicks: PropTypes.number,
  orientation: PropTypes.string, // Tick orientation. Only applies to <Axis />
  rangePadding: PropTypes.number,
  scale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  stroke: PropTypes.string,
  strokeDasharray: PropTypes.string,
  strokeWidth: PropTypes.number,
  tickClassName: PropTypes.string,
  tickComponent: PropTypes.func,
  tickFormat: PropTypes.func,
  tickLabelProps: PropTypes.func,
  tickLengthOverride: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  tickStroke: PropTypes.string,
  tickTransform: PropTypes.string,
  tickValues: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
  top: PropTypes.number,
  fullLengthTick: PropTypes.bool,
  hideEndTicks: PropTypes.bool,
  additionalAxisStyles: PropTypes.object,
  automaticallyAddPaddingForTicks: PropTypes.bool,
  automaticallySetRange: PropTypes.bool,
  tickPositionVariable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  tickLabelVariable: PropTypes.string,
  additionalTickValues: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
};

export const legendComponentPropTypes = {
  draggable: PropTypes.bool,
  shape: PropTypes.string,
  pinnedPosition: PropTypes.oneOfType([
    PropTypes.shape({
      x: PropTypes.number,
      y: PropTypes.number,
    }),
    PropTypes.bool,
  ]),
  orientation: PropTypes.oneOf(['vertical', 'horizontal']),
};

export const regressionLineComponentPropTypes = {
  data: PropTypes.arrayOf(PropTypes.any).isRequired,
  xVariable: PropTypes.string.isRequired,
  yVariable: PropTypes.string.isRequired,
  xScale: PropTypes.func.isRequired,
  yScale: PropTypes.func.isRequired,
};

export const barsComponentPropTypes = {
  ...baseComponentPropTypes,
  data: PropTypes.arrayOf(PropTypes.any),
  colorScale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  colorVariable: PropTypes.string,
  fill: PropTypes.string,
  xScale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  xVariable: PropTypes.string,
  yScale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  yVariable: PropTypes.string,
  barHeightVariable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  fixedBarHeight: PropTypes.bool,
  automaticallySetRange: PropTypes.bool,
};

export const dotsComponentPropTypes = {
  ...baseComponentPropTypes,
  data: PropTypes.arrayOf(PropTypes.any).isRequired,
  xVariable: PropTypes.string.isRequired,
  yVariable: PropTypes.string.isRequired,
  sizeVariable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  colorVariable: PropTypes.string.isRequired,
  opacity: PropTypes.number,
  xScale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  yScale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  sizeScale: PropTypes.func,
  colorScale: PropTypes.func,
  hollowDots: PropTypes.bool,
  labelColumn: PropTypes.string,
  labelProps: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  showTooltips: PropTypes.bool,
  yTransformFunction: PropTypes.func,
  strokeColor: PropTypes.string,
  strokeWidth: PropTypes.number,
  labelStrokeColor: PropTypes.string,
  labelStrokeWidth: PropTypes.number,
  highlightDotsOnHover: PropTypes.bool,
  hoveredDotsColorScale: PropTypes.func,
  hoveredDotsLabelColorScale: PropTypes.func,
  labelColorScale: PropTypes.func,
  offChartLabelPosition: PropTypes.oneOf(['intersection', 'end']),
  customTooltipComponent: PropTypes.bool,
};

export const lineComponentPropTypes = {
  data: PropTypes.arrayOf(PropTypes.any),
  fill: PropTypes.string,
  xVariable: PropTypes.string,
  yVariable: PropTypes.string,
  xScale: PropTypes.func,
  yScale: PropTypes.func,
  colorScale: PropTypes.func,
  strokeWidth: PropTypes.number,
  yTransformFunction: PropTypes.func,
  defined: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
};

export const linesComponentPropTypes = {
  width: PropTypes.number,
  height: PropTypes.number,
  seriesNames: PropTypes.arrayOf(PropTypes.string),
  data: PropTypes.arrayOf(PropTypes.any),
  xVariable: PropTypes.string,
  xScale: PropTypes.func,
  yScale: PropTypes.func,
  colorScale: PropTypes.func,
  strokeWidth: PropTypes.number,
  yTransformFunction: PropTypes.func,
  defined: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  highlightedLineOutlineWidthh: PropTypes.number,
  highlightedLineOutlineColor: PropTypes.string,
  // Props for hoverable lines
  highlightLinesOnHover: PropTypes.bool,
  hoveredLineStrokeWidth: PropTypes.number,
  hoveredLinesColorScale: PropTypes.func,
};

export const marimekkoKeyPropTypes = {
  ...baseComponentPropTypes,
  barHeightAnnotation: PropTypes.string,
  barHeightAnnotationLineHeight: PropTypes.number,
  barHeightAnnotationWidth: PropTypes.number,
  keyBarsWidth: PropTypes.number,
  keyData: PropTypes.arrayOf(PropTypes.any),
  keyHeight: PropTypes.number,
  keyMarginBottom: PropTypes.number,
  keyTitle: PropTypes.string,
  keyTitleWidth: PropTypes.number,
  keyX: PropTypes.number,
  keyY: PropTypes.number,
};

export const barChartPropTypes = {
  ...barsComponentPropTypes,
  xAxisOrientation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  yAxisOrientation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  hideTopper: PropTypes.bool,
  hideFooter: PropTypes.bool,
  automaticallyAddPaddingForTicks: PropTypes.bool,
  paddingInner: PropTypes.number,
  paddingOuter: PropTypes.number,
  yTickLength: PropTypes.number,
  xTickLength: PropTypes.number,
  hideXAxisLine: PropTypes.bool,
  hideYAxisLine: PropTypes.bool,
  background: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  xMax: PropTypes.number,
  roundScale: PropTypes.bool,
};

export const marimekkoChartPropTypes = {
  ...barsComponentPropTypes,
  ...marimekkoKeyPropTypes,
  marimekkoKey: PropTypes.bool,
  xAxisOrientation: PropTypes.string,
  yAxisOrientation: PropTypes.string,
  yLabelVariable: PropTypes.string,
  yAutomaticallyAddPaddingForTicks: PropTypes.bool,
  yTickLength: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  barPaddingInner: PropTypes.number,
  barPaddingOuter: PropTypes.number,
  xHideAxisLine: PropTypes.bool,
  xFullLengthTicks: PropTypes.bool,
  xMax: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  xMin: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
  xTicks: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
};

export const connectedScatterChartPropTypes = {
  ...dotsComponentPropTypes,
  ...linesComponentPropTypes,
  orderVariable: PropTypes.string,
  xAxisOrientation: PropTypes.string,
  yAxisOrientation: PropTypes.string,
};

export const lineChartPropTypes = {
  ...linesComponentPropTypes,
  xAxisOrientation: PropTypes.string,
  yAxisOrientation: PropTypes.string,
  yVariable: PropTypes.arrayOf(PropTypes.string),
  logScale: PropTypes.bool,
  yTickValues: PropTypes.array,
  xFullLengthTicks: PropTypes.bool,
  yFullLengthTicks: PropTypes.bool,
  yMin: PropTypes.number,
  yMax: PropTypes.number,
  xScaleType: PropTypes.oneOf(['time', 'linear']),
  showLegend: PropTypes.bool,
  showLineEndDots: PropTypes.bool,
  yTickFormat: PropTypes.func,
  xTickFormat: PropTypes.func,
  hideEndTicks: PropTypes.bool,
  additionalAxisStyles: PropTypes.object,
  stabRule: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  xAxisLabel: PropTypes.string,
  xAxisLabelOffset: PropTypes.number,
  xAxisLabelProps: PropTypes.object,
  showTooltips: PropTypes.bool,
  tooltipStyle: PropTypes.object,
  tooltipComponent: PropTypes.func,
  showTooltipLine: PropTypes.bool,
  hideTopper: PropTypes.bool,
  hideFooter: PropTypes.bool,
  hideTitleTooltip: PropTypes.bool,
  seriesToHighlight: PropTypes.arrayOf(PropTypes.string),
  labelStrokeColor: PropTypes.string,
  labelStrokeWidth: PropTypes.number,
  allLinesHoverable: PropTypes.bool,
  lineColorPalette: PropTypes.array,
  labelColorPalette: PropTypes.array,
  ghostLineColor: PropTypes.string,
  ghostLineHoverColorScale: PropTypes.func,
  ghostLineHoverLabelColorScale: PropTypes.func,
  highlightedLineOutlineWidth: PropTypes.number,
  hoverRadius: PropTypes.number,
  additionalYTickValues: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
};

export const smallBarChartPropTypes = {
  ...barChartPropTypes,
};

export const scatterChartPropTypes = {
  ...dotsComponentPropTypes,
  type: PropTypes.string,
  xAxisOrientation: PropTypes.string,
  yAxisOrientation: PropTypes.string,
  xAxisLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  yAxisLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  colorScale: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  logScaleX: PropTypes.bool,
  logScaleY: PropTypes.bool,
  yTickValues: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
  yTickFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  yTransformFunction: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  xTickValues: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
  xTickFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  xTransformFunction: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  legendGeometry: PropTypes.string,
  legendOrientation: PropTypes.string,
  hideLegend: PropTypes.bool,
  hideSizeLegend: PropTypes.bool,
  sizeLegendX: PropTypes.number,
  sizeLegendY: PropTypes.number,
  lineOfRegression: PropTypes.bool,
  showTooltips: PropTypes.bool,
  tooltipStyle: PropTypes.object,
  tooltipComponent: PropTypes.func,
  dotsStrokeWidth: PropTypes.number,
  sizeDomain: PropTypes.arrayOf(PropTypes.number),
  hoveredDotsStrokeColor: PropTypes.string,
  hoveredDotsStrokeWidth: PropTypes.number,
};

export const delaunayPropTypes = {
  xScale: PropTypes.func.isRequired,
  yScale: PropTypes.func.isRequired,
  colorScale: PropTypes.func,
  yTransformFunction: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  xVariable: PropTypes.string.isRequired,
  yVariable: PropTypes.string.inRequired,
  data: PropTypes.array.isRequired,
  debug: PropTypes.bool,
  tooltipPositionOverride: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  showLine: PropTypes.bool,
  showCircle: PropTypes.bool,
  lineConfig: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  circleConfig: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  hoverRadius: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
};
