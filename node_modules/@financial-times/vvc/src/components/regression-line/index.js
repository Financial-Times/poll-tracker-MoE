/**
 * @file
 * RegressionLine geometry
 * Code from https://gist.github.com/isaaguilar/fb92517c1ce878f7d3780cf9aa74a709
 */

import React, { useContext } from 'react';
import { Line } from '@visx/shape';
import { PlotContext } from '../chart-frame/plot-context';
import { regressionLineComponentPropTypes } from '../prop-types';

const linearRegression = (y, x) => {
  const lr = {};
  const n = y.length;
  let sumX = 0;
  let sumY = 0;
  let sumXY = 0;
  let sumXX = 0;
  let sumYY = 0;

  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < y.length; i++) {
    sumX += x[i];
    sumY += y[i];
    sumXY += x[i] * y[i];
    sumXX += x[i] * x[i];
    sumYY += y[i] * y[i];
  }

  lr.slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
  lr.intercept = (sumY - lr.slope * sumX) / n;
  // eslint-disable-next-line no-restricted-properties
  lr.r2 = Math.pow(
    (n * sumXY - sumX * sumY) / Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY)),
    2
  );

  // eslint-disable-next-line no-shadow
  return x => {
    return lr.slope * x + lr.intercept;
  };
};

const RegressionLine = props => {
  const { data, xVariable, yVariable, xScale, yScale } = props;
  const { width, height } = useContext(PlotContext);
  xScale.range([0, width]);
  yScale.range([height, 0]);

  let xCoords = [];
  let yCoords = [];
  if (data[0].length) {
    xCoords = data[0].map(n => n[xVariable]);
    yCoords = data[0].map(n => n[yVariable]);
  }

  const trendline = linearRegression(yCoords, xCoords);

  const lowestX = xCoords[0];
  const highestX = xCoords[xCoords.length - 1];

  return (
    <Line
      from={{ x: xScale(lowestX), y: yScale(trendline(lowestX)) }}
      to={{ x: xScale(highestX), y: yScale(trendline(highestX)) }}
      stroke="#000"
      strokeWidth={1}
    />
  );
};

RegressionLine.propTypes = regressionLineComponentPropTypes;

export default RegressionLine;
