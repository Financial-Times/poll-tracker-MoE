// Adapted from https://github.com/hshoff/vx/blob/master/packages/vx-tooltip/src/tooltips/TooltipWithBounds.tsx

import React from 'react';
import PropTypes from 'prop-types';
import { withBoundingRects } from '@visx/bounds';
import { Tooltip } from '@visx/tooltip';

const TooltipWithBounds = ({
  left: initialLeft = 0,
  top: initialTop = 0,
  offsetLeft = 10,
  offsetTop = 10,
  offsetX = 0,
  offsetY = 0,
  dataYPosition,
  maxOffsetY,
  rect,
  parentRect,
  getRects,
  children,
  style,
  ...props
}) => {
  let left = initialLeft;
  let top = initialTop;

  /* If the bounding rect of the component and it's parent is available, adjust it's
    position so it doesn't overflow */
  if (rect && parentRect) {
    left =
      /* If the right side of the bounding rect is greater than the parent bottom or window width
        subtract the width from the final left position */
      offsetLeft + rect.right > parentRect.right ||
      (window && offsetLeft + rect.right > window.innerWidth)
        ? left - rect.width - offsetLeft
        : left + offsetLeft;

    top =
      /* If the bottom side of the bounding rect is greater than the parent bottom or window height
      subtract the height from the final top position */
      offsetTop + rect.bottom > parentRect.bottom ||
      (window && offsetTop + rect.bottom > window.innerHeight)
        ? top - rect.height - offsetTop
        : top + offsetTop;

    const heightOfRect = rect.height;
    // If the y positon of the line is less than bottom of the tooltip (which in this case is offset by -50%)
    const rectOffset =
      typeof offsetY === 'number'
        ? offsetY
        : // Convert % translation
          (Number(offsetY.replace('%', '')) / 100) * heightOfRect;
    if (dataYPosition <= top + heightOfRect + rectOffset) {
      // @TODO alternatively this could be just below the current position on the line
      top = maxOffsetY - heightOfRect;
    }
  }

  left = Math.round(left);
  top = Math.round(top);

  return (
    <Tooltip
      style={{
        position: 'absolute',
        top: 0,
        transform: `translate(${left}px, ${top}px) translateX(${offsetX}) translateY(${offsetY})`,
        ...style,
      }}
      {...props}
    >
      {children}
    </Tooltip>
  );
};

const rectShapePropTypes = PropTypes.shape({
  top: PropTypes.number,
  right: PropTypes.number,
  bottom: PropTypes.number,
  left: PropTypes.number,
  width: PropTypes.number,
  height: PropTypes.number,
});

const withBoundingRectsPropTypes = {
  getRects: PropTypes.func,
  rect: rectShapePropTypes,
  parentRect: rectShapePropTypes,
};

TooltipWithBounds.propTypes = {
  ...Tooltip.propTypes,
  ...withBoundingRectsPropTypes,
  offsetLeft: PropTypes.number,
  offsetTop: PropTypes.number,
  offsetX: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  offsetY: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  maxOffsetY: PropTypes.number,
  dataYPosition: PropTypes.number,
};

export default withBoundingRects(TooltipWithBounds);
