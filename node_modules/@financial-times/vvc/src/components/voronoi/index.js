/**
 * @file
 * Tooltip component
 */

import React, { useContext, useMemo } from 'react';
import PropTypes from 'prop-types';
import { voronoi } from '@visx/voronoi';
import { scaleOrdinal, inferScaleType } from '@visx/scale';
import Region from './region';
import { PlotContext } from '../chart-frame/plot-context';
import { useTooltipEvents } from '../../util/hooks';
import { isZeroOrDefined } from '../../util';

const Voronoi = ({
  data,
  xVariable,
  yVariable,
  labelVariable,
  xScale,
  yScale,
  yTransformFunction,
  colorScale,
  debug,
  sizeScale,
  sizeVariable,
  showLine,
  // Frame
  margin,
  padding,
  width,
  height,
  // Tooltip
  tooltipEvents,
  tooltipPositionOverride,
  showTooltips,
}) => {
  xScale.range([0, width]);
  yScale.range([height, 0]);

  const voronoiDiagram = useMemo(
    () =>
      width > 0 &&
      height > 0 &&
      voronoi({
        x: (d) => xScale(d[xVariable]),
        y: (d) => yScale(yTransformFunction ? yTransformFunction(d[yVariable]) : d[yVariable]),
        width,
        height,
      })(data.filter((d) => isZeroOrDefined(d[xVariable]) && isZeroOrDefined(d[yVariable]))),
    [data, height, width, xScale, xVariable, yScale, yTransformFunction, yVariable]
  );

  return (
    voronoiDiagram &&
    voronoiDiagram.polygons().map((polygon, i) => {
      const {
        data: { y: dataY, [labelVariable]: tooltipContent, seriesName, isHighlighted },
      } = polygon;

      const tooltipDataObject =
        // Check that this is actually being used first
        isHighlighted !== undefined
          ? isHighlighted
            ? {
                content: tooltipContent,
                dataYPosition:
                  margin.top + yScale(yTransformFunction ? yTransformFunction(dataY) : dataY),
                maxOffsetY: margin.top + height,
              }
            : { seriesName }
          : {
              content: tooltipContent,
            };

      const tooltipPosition =
        tooltipPositionOverride &&
        tooltipPositionOverride({
          data: polygon.data,
          xScale: (x) => margin.left + padding.left + xScale(x),
          yScale: (y) => margin.top + yScale(yTransformFunction ? yTransformFunction(y) : y),
        });

      const { onMouseOver, onFocus, onMouseOut, onBlur } = tooltipEvents(
        tooltipDataObject,
        tooltipPosition
      );

      return (
        <Region
          key={`polygon-${polygon.data.id || i}`}
          polygon={polygon}
          x={xScale(polygon.data[xVariable])}
          y={yScale(
            yTransformFunction
              ? yTransformFunction(polygon.data[yVariable])
              : polygon.data[yVariable]
          )}
          fill={colorScale(polygon.data.seriesName)}
          onMouseOver={onMouseOver}
          onFocus={onFocus}
          onMouseOut={onMouseOut}
          onBlur={onBlur}
          debug={debug}
          r={sizeScale(polygon.data[sizeVariable]) + (showLine ? 1 : 0)}
          showLine={showLine}
          circleStroke={showLine ? '#fff1e5' : 'transparent'}
          circleStrokeWidth={showLine ? 1 : 0}
          height={height}
          showCircle={isHighlighted}
        />
      );
    })
  );
};

const MemoisedVoronoi = React.memo(
  Voronoi,
  // Voronoi is rerendered if the areEqual function returns false
  (prevProps, nextProps) => JSON.stringify(prevProps) === JSON.stringify(nextProps)
);

const VoronoiWithContext = ({ showTooltips, ...props }) => {
  const { margin, padding, width, height, updateTooltip } = useContext(PlotContext);
  const tooltipEvents = useTooltipEvents({ enabled: showTooltips, updateTooltip });

  return (
    <MemoisedVoronoi
      {...props}
      margin={margin}
      padding={padding}
      width={width}
      height={height}
      showTooltips={showTooltips}
      tooltipEvents={tooltipEvents}
      // This should force the lines to rerender when the scale type changes
      yScaleType={inferScaleType(props.yScale)}
    />
  );
};

Voronoi.propTypes = {
  data: PropTypes.arrayOf(PropTypes.any),
  xVariable: PropTypes.string,
  yVariable: PropTypes.string,
  labelVariable: PropTypes.string,
  sizeVariable: PropTypes.string,
  xScale: PropTypes.func.isRequired,
  yScale: PropTypes.func.isRequired,
  yTransformFunction: PropTypes.func,
  colorScale: PropTypes.func.isRequired,
  sizeScale: PropTypes.func,
  debug: PropTypes.bool,
  tooltipPositionOverride: PropTypes.func,
  showLine: PropTypes.bool,
};

Voronoi.defaultProps = {
  data: [],
  xVariable: 'x',
  yVariable: 'y',
  labelVariable: 'label',
  debug: false,
  colorScale: scaleOrdinal(['black']),
  sizeScale: (val) => val || 4,
  sizeVariable: 'r',
  showLine: false,
};

export default VoronoiWithContext;
