/**
 * @file
 * Bar chart template
 */

import React from 'react';
import { scaleBand, scaleLinear } from '@visx/scale';
import { extent } from 'd3-array';
import ChartFrame from '../../components/chart-frame';
import Bars from '../../components/bars';
import Axis from '../../components/axis';
import { barChartPropTypes } from '../../components/prop-types';
import { barChartDefaultProps } from '../../components/default-props';

const BarChart = ({
  additionalAxisStyles,
  automaticallyAddPaddingForTicks,
  hideXAxisLine,
  hideXAxisTicks,
  hideYAxisLine,
  hideYAxisTicks,
  xAxisOrientation,
  xTickLength,
  yAxisOrientation,
  yTickComponent,
  yTickFormat,
  yTickLength,
  xMax: xMaxOverride,
  // Base
  height,
  margin,
  padding,
  width,
  // <ChartFrame />
  background,
  hideFooter,
  hideTopper,
  type,
  description,
  // <Bars />
  data,
  fill,
  fixedBarHeight,
  paddingInner,
  paddingOuter,
  roundScale,
  xVariable,
  yVariable,
}) => {
  // Construct scales *without* specifying ranges. Components that receive scales as props will specify their own ranges based on the width/height props they receive (directly or via <ChartFrame />)
  const dataExtent = extent(data, (d) => d[xVariable]);
  const xMax = xMaxOverride || Math.max(dataExtent[1], 0);
  const xScale = scaleLinear({
    domain: [Math.min(0, dataExtent[0]), xMax],
    round: roundScale,
  });
  const yScaleOptions = {
    domain: data.map((d) => d[yVariable]),
    paddingInner,
    paddingOuter,
    round: roundScale,
  };
  const yScale = fixedBarHeight
    ? scaleBand({ ...yScaleOptions, range: [0, fixedBarHeight * data.length] })
    : scaleBand(yScaleOptions);

  return (
    <ChartFrame
      background={background}
      height={height}
      hideFooter={hideFooter}
      hideTopper={hideTopper}
      margin={margin}
      padding={padding}
      type={type}
      width={width}
      description={description}
    >
      {/* y-axis */}
      {yAxisOrientation && (
        <Axis
          additionalAxisStyles={additionalAxisStyles}
          automaticallyAddPaddingForTicks={automaticallyAddPaddingForTicks}
          automaticallySetRange={!fixedBarHeight}
          hideAxisLine={hideYAxisLine}
          hideTicks={hideYAxisTicks}
          orientation={yAxisOrientation}
          scale={yScale}
          tickComponent={yTickComponent}
          tickFormat={yTickFormat}
          tickLengthOverride={yTickLength}
        />
      )}

      {/* x-axis */}
      {xAxisOrientation && (
        <Axis
          automaticallySetRange={!fixedBarHeight}
          hideAxisLine={hideXAxisLine}
          hideTicks={hideXAxisTicks}
          orientation={xAxisOrientation}
          scale={xScale}
          tickLengthOverride={xTickLength}
        />
      )}

      <Bars
        data={data}
        fill={fill}
        fixedBarHeight={fixedBarHeight}
        // Set the range in the bars component if not set by either axes
        automaticallySetRange={!xAxisOrientation || !yAxisOrientation}
        xScale={xScale}
        xVariable={xVariable}
        yScale={yScale}
        yVariable={yVariable}
      />
    </ChartFrame>
  );
};

BarChart.propTypes = barChartPropTypes;
BarChart.defaultProps = barChartDefaultProps;

export default BarChart;
