/**
 * @file
 * Scatter chart template
 */

import React from 'react';
import * as GChartcolour from 'g-chartcolour';
import groupBy from 'lodash.groupby';
import { scaleLinear, scaleOrdinal } from '@visx/scale';
import { extent } from 'd3-array';
import { Group } from '@visx/group';
import ChartFrame from '../../components/chart-frame';
import Legend from '../../components/legend';
import { Dots } from '../../components/dots';
import { Line } from '../../components/lines';
import Axis from '../../components/axis';
import { connectedScatterChartPropTypes } from '../../components/prop-types';
import { connectedScatterChartDefaultProps } from '../../components/default-props';

const ConnectedScatterChart = (props) => {
  const {
    data,
    type,
    width,
    height,
    margin,
    description,
    xAxisOrientation,
    yAxisOrientation,
    xVariable,
    yVariable,
    orderVariable,
    colorVariable,
    labelColumn,
  } = props;

  // Set scales
  const xScale = scaleLinear({
    domain: [
      Math.min(0, extent(data, (d) => d[xVariable])[0]),
      extent(data, (d) => d[xVariable])[1],
    ],
  });
  const yScale = scaleLinear({
    domain: [
      Math.min(0, extent(data, (d) => d[yVariable])[0]),
      extent(data, (d) => d[yVariable])[1],
    ],
  });
  const colorScale = scaleOrdinal({
    domain: [...new Set(data.map((d) => d[colorVariable]))],
    range:
      type === 'print' // eslint-disable-line no-nested-ternary
        ? GChartcolour.linePrint
        : type === 'social' || type === 'video'
        ? GChartcolour.lineSocial
        : GChartcolour.lineWeb,
  });

  // Order data ascending by the `orderVariable`
  const orderedData = data.sort((a, b) => {
    if (orderVariable === 'date') {
      return new Date(a[orderVariable]) - new Date(b[orderVariable]);
    }
    return a[orderVariable] - b[orderVariable];
  });
  // Group data by `group`
  const parsedData = groupBy(orderedData, 'group');

  return (
    <ChartFrame type={type} width={width} height={height} margin={margin} description={description}>
      {Object.keys(parsedData).map((key) => {
        return (
          <Group key={`group__${key}`}>
            <Dots
              data={parsedData[key]}
              xScale={xScale}
              yScale={yScale}
              colorScale={colorScale}
              xVariable={xVariable}
              yVariable={yVariable}
              colorVariable={colorVariable}
              labelVariable={labelColumn}
            />
            <Line
              data={parsedData[key]}
              xVariable={xVariable}
              yVariable={yVariable}
              xScale={xScale}
              yScale={yScale}
              color={colorScale(key)}
            />
          </Group>
        );
      })}

      {/* y-axis */}
      <Axis orientation={yAxisOrientation} scale={yScale} />

      {/* x-axis */}
      <Axis orientation={xAxisOrientation} scale={xScale} />
    </ChartFrame>
  );
};

ConnectedScatterChart.propTypes = connectedScatterChartPropTypes;
ConnectedScatterChart.defaultProps = connectedScatterChartDefaultProps;

export default ConnectedScatterChart;
