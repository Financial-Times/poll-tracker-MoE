/**
 * @file
 * Marimekko chart template
 */

import React from 'react';
import { scaleLinear } from '@visx/scale';
import { sum, extent } from 'd3-array';
import MarimekkoKey from './marimekko-key';
import ChartFrame from '../../components/chart-frame';
import Bars from '../../components/bars';
import Axis from '../../components/axis';
import { marimekkoChartPropTypes } from '../../components/prop-types';
import { marimekkoChartDefaultProps } from '../../components/default-props';

const MarimekkoChart = ({
  marimekkoKey,
  xAxisArrows,
  xAxisOrientation,
  yAxisOrientation,
  xAxisTickLabelProps,
  xTickFormat,
  xHideAxisLine,
  xFullLengthTicks,
  xMax,
  xMin,
  xTicks,
  yHideAxisLine,
  yHideTicks,
  yAutomaticallyAddPaddingForTicks,
  yTickLength,
  // Base
  height,
  margin,
  padding,
  width,
  hideTopper,
  hideFooter,
  background,
  stabRule,
  title,
  titleMarkupCustom,
  subtitle,
  subtitleMarkupCustom,
  description,
  source,
  copyright,
  // <ChartFrame />
  type,
  // <Bars />
  barPaddingOuter,
  barPaddingInner,
  data,
  fill,
  colorScale,
  colorVariable,
  xVariable,
  yVariable,
  yLabelVariable,
  // <MarimekkoKey />
  barHeightAnnotation,
  barHeightAnnotationLineHeight,
  barHeightAnnotationWidth,
  keyBarsWidth,
  keyData,
  keyHeight,
  keyMarginBottom,
  keyTitle,
  keyTitleWidth,
}) => {
  const dataXExtent = extent(data, (d) => d[xVariable]);
  const parsedData = data.reduce((a, c, i) => {
    // Add yOffset which details cumulative height based on the size variable
    return [
      ...a,
      {
        ...c,
        yOffset:
          i === 0
            ? barPaddingOuter
            : Math.abs(a[a.length - 1][yVariable]) + a[a.length - 1].yOffset + barPaddingInner,
      },
    ];
  }, []);
  const yTicks = parsedData.map((d) => ({
    label: d[yLabelVariable],
    yPosition: d.yOffset + d[yVariable] * 0.5,
  }));
  // calculate totalSize for the yScale
  const totalSize =
    sum(parsedData, (d) => Math.abs(d[yVariable])) +
    2 * barPaddingOuter +
    barPaddingInner * parsedData.length;

  // Construct scales *without* specifying ranges. Components that receive scales as props will specify their own ranges based on the width/height props they receive (directly or via <ChartFrame />)
  const xScale = scaleLinear({
    domain: [Math.min(0, dataXExtent[0], xMin), Math.max(dataXExtent[1], 0, xMax)],
  });
  const yScale = scaleLinear({ domain: [0, totalSize] });

  const marginTop = marimekkoKey ? margin.top + keyHeight + keyMarginBottom : margin.top;

  return (
    <ChartFrame
      height={height}
      margin={{ ...margin, top: marginTop }}
      padding={padding}
      type={type}
      width={width}
      hideTopper={hideTopper}
      hideFooter={hideFooter}
      background={background}
      stabRule={stabRule}
      title={title}
      titleMarkupCustom={titleMarkupCustom}
      subtitle={subtitle}
      subtitleMarkupCustom={subtitleMarkupCustom}
      description={description}
      source={source}
      copyright={copyright}
    >
      {/* x-axis */}
      <Axis
        orientation={xAxisOrientation}
        scale={xScale}
        tickValues={xTicks}
        axisArrows={xAxisArrows}
        tickFormat={xTickFormat}
        fullLengthTicks={xFullLengthTicks}
        hideAxisLine={xHideAxisLine}
        tickLabelProps={xAxisTickLabelProps}
      />

      <Bars
        data={parsedData}
        fill={fill}
        colorScale={colorScale}
        colorVariable={colorVariable}
        xScale={xScale}
        xVariable={xVariable}
        yScale={yScale}
        yVariable="yOffset"
        barHeightVariable={yVariable}
      />

      {/* y-axis */}
      <Axis
        orientation={yAxisOrientation}
        scale={yScale}
        tickValues={yTicks}
        tickPositionVariable="yPosition"
        hideAxisLine={yHideAxisLine}
        hideTicks={yHideTicks}
        automaticallyAddPaddingForTicks={yAutomaticallyAddPaddingForTicks}
        tickLengthOverride={yTickLength}
      />

      {/* Key (temporary implementation for 2020 US polltracker Marimekko). The position is described relative to the upper left corner of the graphing area (not including the axes) */}
      {marimekkoKey && (
        <MarimekkoKey
          barHeightAnnotation={barHeightAnnotation}
          barHeightAnnotationWidth={barHeightAnnotationWidth}
          keyHeight={keyHeight}
          keyY={-(keyHeight + keyMarginBottom)}
        />
      )}
    </ChartFrame>
  );
};

MarimekkoChart.propTypes = marimekkoChartPropTypes;
MarimekkoChart.defaultProps = marimekkoChartDefaultProps;

export default MarimekkoChart;
