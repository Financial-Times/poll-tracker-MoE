/**
 * @file
 * Scatter chart template
 */

import React from 'react';
import { PlotContext } from '../../components/chart-frame/plot-context';
import { scaleLinear, scaleOrdinal, scaleLog, scaleSqrt } from '@visx/scale';
import { extent } from 'd3-array';
import * as GChartcolour from 'g-chartcolour';
import ChartFrame from '../../components/chart-frame';
import { Dots } from '../../components/dots';
import Legend from '../../components/legend';
import RegressionLine from '../../components/regression-line';
import Axis from '../../components/axis';
import Delaunay from '../../components/delaunay';
import { isZeroOrDefined, identity } from '../../util';
import { scatterChartPropTypes } from '../../components/prop-types';
import { scatterChartDefaultProps } from '../../components/default-props';

const ScatterChart = ({
  // Base
  type,
  data,
  width,
  height,
  margin,
  // ChartFrame
  title,
  subtitle,
  description,
  hideTopper,
  hideFooter,
  hideTitleTooltip,
  stabRule,
  // Legend
  hideLegend,
  legendOrientation,
  legendGeometry,
  hideSizeLegend,
  sizeLegendX,
  sizeLegendY,
  // Tooltips
  showTooltips,
  tooltipStyle,
  tooltipComponent,
  tooltipPositionOverride,
  tooltipHoverRadius,
  hoveredDotsStrokeColor,
  hoveredDotsStrokeWidth,
  // Config
  xAxisOrientation,
  yAxisOrientation,
  xAxisLabel,
  yAxisLabel,
  xVariable,
  yVariable,
  sizeVariable,
  colorVariable,
  colorScale: inputColorScale,
  logScaleX,
  logScaleY,
  yTickFormat,
  yTransformFunction,
  yTickValues,
  xTickFormat,
  xTransformFunction,
  xTickValues,
  opacity,
  scaleFactor,
  maxCircleSize,
  hollowDots,
  dotsStrokeWidth,
  lineOfRegression,
  labelColumn,
  xDomain,
  yDomain,
  sizeDomain,
}) => {
  // If we have variable size circles, sort data array by sizeVariable so small circles appear on top (rendered last in the DOM)
  if (sizeVariable) {
    data.sort((a, b) => b[sizeVariable] - a[sizeVariable]);
  }

  // Checks for the minimum and maximum values in the data
  const xExtent = extent(data, (d) => d[xVariable]);
  const yExtent = extent(data, (d) => d[yVariable]);
  const sizeExtent = sizeVariable ? extent(data, (d) => d[sizeVariable]) : null;

  const xMin = Math.min(xDomain[0], xExtent[0]);
  const xMax = Math.max(xDomain[1], xExtent[1]);
  const yMin =
    logScaleY && Math.min(yDomain[0], yExtent[0]) === 0 ? 1 : Math.min(yDomain[0], yExtent[0]);
  const yMax = Math.max(yDomain[1], yExtent[1]);
  const transformedXMin = xTransformFunction ? xTransformFunction(xMin) : xMin;
  const transformedXMax = xTransformFunction ? xTransformFunction(xMax) : xMax;
  const transformedYMin = yTransformFunction ? yTransformFunction(yMin) : yMin;
  const transformedYMax = yTransformFunction ? yTransformFunction(yMax) : yMax;

  let xScale = scaleLinear({
    domain: [transformedXMin, transformedXMax],
  });
  if (logScaleX) {
    xScale = scaleLog({
      domain: [transformedXMin, transformedXMax],
    });
  }

  let yScale = scaleLinear({
    domain: [transformedYMin, transformedYMax],
  });

  if (logScaleY) {
    yScale = scaleLog({
      domain: [transformedYMin, transformedYMax],
    });
  }

  const sizeScale = sizeVariable
    ? scaleSqrt({
        domain: [Math.min(sizeDomain[0], 0), Math.max(sizeDomain[1], sizeExtent[1])],
        range: [0, maxCircleSize[type] * scaleFactor],
      })
    : () => {
        return maxCircleSize[type] * scaleFactor;
      };

  const colorScale =
    inputColorScale ||
    scaleOrdinal({
      domain: [...new Set(data.map((d) => d[colorVariable]))],
      range:
        type === 'print' // eslint-disable-line no-nested-ternary
          ? GChartcolour.linePrint
          : type === 'social' || type === 'video'
          ? GChartcolour.lineSocial
          : GChartcolour.lineWeb,
    });

  return (
    <ChartFrame
      type={type}
      width={width}
      height={height}
      margin={margin}
      title={title}
      subtitle={subtitle}
      description={description}
      stabRule={stabRule}
      hideTopper={hideTopper}
      hideFooter={hideFooter}
      hideTitleTooltip={hideTitleTooltip}
      tooltipComponent={tooltipComponent}
      tooltipStyle={tooltipStyle}
    >
      {/* y-axis */}
      <Axis
        orientation={yAxisOrientation}
        scale={yScale}
        label={yAxisLabel || yVariable}
        tickFormat={yTickFormat || (logScaleY && identity)}
        tickValues={yTickValues}
      />

      {/* x-axis */}
      <Axis
        orientation={xAxisOrientation}
        scale={xScale}
        label={xAxisLabel || xVariable}
        tickFormat={xTickFormat || (logScaleX && identity)}
        tickValues={xTickValues}
      />

      {!hideLegend && Object.prototype.hasOwnProperty.call(colorScale, 'domain') && (
        <Legend
          scale={colorScale}
          geometry={legendGeometry}
          orientation={legendOrientation}
          draggable={false}
        />
      )}

      {sizeVariable && !hideSizeLegend && (
        <Legend
          legendType="magnitude"
          scale={sizeScale}
          seriesNames={sizeExtent}
          label="population"
          posX={sizeLegendX}
          posY={sizeLegendY}
          draggable={false}
        />
      )}

      {lineOfRegression && (
        <RegressionLine
          data={[data]}
          xScale={xScale}
          yScale={yScale}
          colorScale={colorScale}
          xVariable={xVariable}
          yVariable={yVariable}
          sizeVariable={sizeVariable}
          colorVariable={colorVariable}
        />
      )}

      <Dots
        data={data}
        xScale={xScale}
        yScale={yScale}
        sizeScale={sizeScale}
        colorScale={colorScale}
        xVariable={xVariable}
        yVariable={yVariable}
        sizeVariable={sizeVariable}
        colorVariable={colorVariable}
        opacity={opacity}
        strokeWidth={dotsStrokeWidth}
        hollowDots={hollowDots}
        labelVariable={labelColumn}
        highlightDotsOnHover={showTooltips}
        hoveredDotsStrokeColor={hoveredDotsStrokeColor}
        hoveredDotsStrokeWidth={hoveredDotsStrokeWidth}
      />

      {showTooltips && (
        <Delaunay
          data={data}
          xScale={xScale}
          yScale={yScale}
          colorScale={colorScale}
          xVariable={xVariable}
          yVariable={yVariable}
          tooltipPositionOverride={tooltipPositionOverride}
          hoverRadius={tooltipHoverRadius}
        />
      )}
    </ChartFrame>
  );
};

ScatterChart.propTypes = scatterChartPropTypes;
ScatterChart.defaultProps = scatterChartDefaultProps;

export default ScatterChart;
