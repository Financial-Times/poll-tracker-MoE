/**
 * @file
 * Thermometer template
 */

import React from 'react';
import PropTypes from 'prop-types';
import { scaleLinear } from '@visx/scale';
import { Group } from '@visx/group';
import { Bar } from '@visx/shape';
import ChartFrame from '../../components/chart-frame';

const Thermometer = ({ total, left, right, isCondensed, width }) => {
  const midpoint = Math.min(total / 2 + 1);
  // Set valueTossup to 0 if left and right data comes in as 0 so it doesn't render
  const valueTossup = left.valueSolid
    ? total - (left.valueSolid + left.valueLeaning + right.valueSolid + right.valueLeaning)
    : 0;
  const xScale = scaleLinear({ domain: [0, total] }).rangeRound([0, width]);
  return (
    <>
      <defs>
        <pattern
          id="stripe"
          width={8}
          height={8}
          patternUnits="userSpaceOnUse"
          patternTransform="rotate(-45)"
        >
          <line y2={8} stroke="#cccccc" strokeWidth={16} />
          <line y2={8} stroke="#9c9c9c" strokeWidth={2.5} />
        </pattern>
        <filter id="shadow">
          <feDropShadow dy={2} stdDeviation={0.8} floodColor="#000000" floodOpacity={0.4} />
        </filter>
      </defs>
      <Group>
        <text
          x={1}
          y={isCondensed ? 39 : -4}
          dominantBaseline="hanging"
          fill={left.colorSolid}
          fontFamily="MetricWeb"
          fontWeight={600}
          fontSize={isCondensed ? 34 : 50}
        >
          {left.valueSolid + left.valueLeaning}
        </text>
        <text
          x={isCondensed ? 0 : 86}
          y={1}
          dominantBaseline="hanging"
          fill="#33302e"
          fontFamily="MetricWeb"
          fontWeight={600}
          fontSize={20}
        >
          {left.name}
        </text>
        <text
          x={isCondensed ? 0 : 86}
          y={23}
          dominantBaseline="hanging"
          fill="#33302e"
          fontSize={14}
          letterSpacing={0.4}
        >
          {left.party.toUpperCase()}
        </text>
      </Group>
      <Group left={width}>
        <text
          x={1}
          y={isCondensed ? 39 : -4}
          dominantBaseline="hanging"
          textAnchor="end"
          fill={right.colorSolid}
          fontFamily="MetricWeb"
          fontWeight={600}
          fontSize={isCondensed ? 34 : 50}
        >
          {right.valueSolid + right.valueLeaning}
        </text>
        <text
          x={isCondensed ? 0 : -86}
          y={1}
          dominantBaseline="hanging"
          textAnchor="end"
          fill="#33302e"
          fontFamily="MetricWeb"
          fontWeight={600}
          fontSize={20}
        >
          {right.name}
        </text>
        <text
          x={isCondensed ? 0 : -86}
          y={23}
          dominantBaseline="hanging"
          textAnchor="end"
          fill="#33302e"
          fontSize={14}
          letterSpacing={0.4}
        >
          {right.party.toUpperCase()}
        </text>
      </Group>
      <text
        x={width / 2}
        y={isCondensed ? 64 : 33}
        fill="#434343"
        textAnchor="middle"
        fontSize={15}
      >
        {`${midpoint} to win`}
      </text>
      <Group top={isCondensed ? 76 : 46}>
        <Bar width={xScale(left.valueSolid)} height={41} fill={left.colorSolid} />
        <Bar
          x={xScale(left.valueSolid)}
          width={xScale(left.valueLeaning)}
          height={41}
          fill={left.colorLeaning}
        />
        <Bar
          x={xScale(left.valueSolid) + xScale(left.valueLeaning)}
          width={xScale(valueTossup)}
          height={41}
          fill="url(#stripe)"
        />
        <Bar
          x={xScale(left.valueSolid) + xScale(left.valueLeaning) + xScale(valueTossup)}
          width={xScale(right.valueLeaning)}
          height={41}
          fill={right.colorLeaning}
        />
        <Bar
          x={
            xScale(left.valueSolid) +
            xScale(left.valueLeaning) +
            xScale(valueTossup) +
            xScale(right.valueLeaning)
          }
          width={xScale(right.valueSolid)}
          height={41}
          fill={right.colorSolid}
        />
        {(left.valueSolid >= midpoint || right.valueSolid >= midpoint) && (
          <line
            x1={width / 2}
            y1={0}
            x2={width / 2}
            y2={41}
            stroke="#ffffff"
            strokeWidth={2.5}
            strokeDasharray="0 1.25 6.5 0.25"
          />
        )}
        <line
          x1={width / 2}
          y1={0}
          x2={width / 2}
          y2={41}
          stroke="#333333"
          strokeDasharray="0 2 5 1"
        />
        <polygon transform={`translate(${width / 2}, 45)`} points="-5,7 0,0 5,7" fill="#333333" />
        {left.valueSolid && (
          <text
            x={isCondensed ? 8 : 15}
            y={26}
            fill="white"
            textAnchor="start"
            fontSize={isCondensed ? 20 : 18}
            fontWeight={500}
            filter="url(#shadow)"
          >
            {left.valueSolid}
          </text>
        )}
        {left.valueLeaning && (
          <text
            x={xScale(left.valueSolid) + xScale(left.valueLeaning) / 2}
            y={26}
            fill="white"
            textAnchor="middle"
            fontSize={isCondensed ? 20 : 18}
            fontWeight={500}
            filter="url(#shadow)"
          >
            {left.valueLeaning}
          </text>
        )}
        {valueTossup && (
          <text
            x={xScale(left.valueSolid) + xScale(left.valueLeaning) + xScale(valueTossup) / 2}
            y={26}
            fill="white"
            textAnchor="middle"
            fontSize={isCondensed ? 20 : 18}
            fontWeight={500}
            filter="url(#shadow)"
          >
            {valueTossup}
          </text>
        )}
        {right.valueLeaning && (
          <text
            x={
              xScale(left.valueSolid) +
              xScale(left.valueLeaning) +
              xScale(valueTossup) +
              xScale(right.valueLeaning) / 2
            }
            y={26}
            fill="white"
            textAnchor="middle"
            fontSize={isCondensed ? 20 : 18}
            fontWeight={500}
            filter="url(#shadow)"
          >
            {right.valueLeaning}
          </text>
        )}
        {right.valueSolid && (
          <text
            x={isCondensed ? width - 8 : width - 15}
            y={26}
            fill="white"
            textAnchor="end"
            fontSize={isCondensed ? 20 : 18}
            fontWeight={500}
            filter="url(#shadow)"
          >
            {right.valueSolid}
          </text>
        )}
      </Group>
    </>
  );
};

Thermometer.propTypes = {
  breakpoint: PropTypes.string.isRequired,
  total: PropTypes.number.isRequired,
  left: PropTypes.exact({
    name: PropTypes.string.isRequired,
    party: PropTypes.string.isRequired,
    valueSolid: PropTypes.number.isRequired,
    valueLeaning: PropTypes.number.isRequired,
    colorSolid: PropTypes.string.isRequired,
    colorLeaning: PropTypes.string.isRequired,
  }),
  right: PropTypes.exact({
    name: PropTypes.string.isRequired,
    party: PropTypes.string.isRequired,
    valueSolid: PropTypes.number.isRequired,
    valueLeaning: PropTypes.number.isRequired,
    colorSolid: PropTypes.string.isRequired,
    colorLeaning: PropTypes.string.isRequired,
  }),
};

const ThermometerWrapper = (props) => {
  const isCondensed = ['S', 'default'].includes(props.breakpoint);
  const plotHeight = isCondensed ? 128 : 98;
  const height = props.hideTopper && props.hideFooter ? plotHeight : plotHeight + 180;
  return (
    <ChartFrame {...props} height={height}>
      <Thermometer {...props} isCondensed={isCondensed} />
    </ChartFrame>
  );
};

export default ThermometerWrapper;
