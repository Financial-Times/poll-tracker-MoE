import { prepareState } from "./state";
import { getContainers } from "./container";
import { addChart } from "./chart";
import { initIdentifier } from "./identifier";
import { initDebug, initDebugColor } from "./debug";
import { initClip } from "./clip";
import { initAnimationDuration } from "./animation";
import { initFormat } from "./format";
import { initNumberParse, initDatetimeParse } from "./parse";
import { initDimensions, initOffsetLeft, initOffsetTop } from "./dimensions";
import { initData } from "./data";
import {
	initXTicks,
	initYTicks,
	initY2Ticks,
	initXAutoTicks,
	initYAutoTicks,
	initY2AutoTicks
} from "./ticks";
import { initXTitle, initYTitle, initY2Title } from "./axis-titles";
import { initMargins } from "./margins";
import {
	initXScale,
	initYScale,
	initY2Scale,
	initFlipAxis,
	initZeroAxis,
	initXMinStep,
	initYMinStep,
	initY2MinStep,
	initXPadding,
	initYPadding,
	initY2Padding
} from "./scales";
import { initHide } from "./hide";
import { initUpdate } from "./update";


function initChartLayout(target, state) {
	state = prepareState(state);

	var instance = {};
	var containers = getContainers(target);
	Object.defineProperty(instance, "svg", { get: containers.getSvg });
	instance.container = containers.container;
	instance.chart = addChart(instance);

	instance.data_background = instance.chart.select("g.fl-data-background");
	instance.data_foreground = instance.chart.select("g.fl-data-foreground");

	instance.identifier = initIdentifier(instance);
	instance.debug = initDebug(instance);
	instance.debugColor = initDebugColor(instance);
	instance.clip = initClip(instance);
	instance.animationDuration = initAnimationDuration(instance);

	var dimensions = initDimensions(instance);
	instance.width = dimensions.width;
	instance.height = dimensions.height;
	instance.plotAspect = dimensions.plotAspect;

	Object.defineProperty(instance, "plot_width", { get: dimensions.plotWidth });
	Object.defineProperty(instance, "plot_height", { get: dimensions.plotHeight });
	Object.defineProperty(instance, "x_left", { get: dimensions.xLeft });
	Object.defineProperty(instance, "x_right", { get: dimensions.xRight });
	Object.defineProperty(instance, "y_bottom", { get: dimensions.yBottom });
	Object.defineProperty(instance, "y_top", { get: dimensions.yTop });

	instance.offsetLeft = initOffsetLeft(instance);
	instance.offsetTop = initOffsetTop(instance);

	instance.margins = initMargins(instance, state);

	instance.xData = initData(instance);
	instance.yData = initData(instance);
	instance.y2Data = initData(instance);
	instance.xFormat = initFormat(instance);
	instance.yFormat = initFormat(instance);
	instance.y2Format = initFormat(instance);
	instance.xNumberParse = initNumberParse(instance);
	instance.yNumberParse = initNumberParse(instance);
	instance.y2NumberParse = initNumberParse(instance);
	instance.xDatetimeParse = initDatetimeParse(instance);
	instance.yDatetimeParse = initDatetimeParse(instance);
	instance.y2DatetimeParse = initDatetimeParse(instance);
	instance.xTitle = initXTitle(instance, state); // Implicitly adds instance.xAutoTitle
	instance.yTitle = initYTitle(instance, state); // Implicitly adds instance.yAutoTitle
	instance.y2Title = initY2Title(instance, state); // Implicitly adds instance.y2AutoTitle
	instance.xTicks = initXTicks(instance, state);
	instance.yTicks = initYTicks(instance, state);
	instance.y2Ticks = initY2Ticks(instance, state);
	instance.xAutoTicks = initXAutoTicks(instance);
	instance.yAutoTicks = initYAutoTicks(instance);
	instance.y2AutoTicks = initY2AutoTicks(instance);
	instance.xScale = initXScale(instance, state);
	instance.yScale = initYScale(instance, state);
	instance.y2Scale = initY2Scale(instance, state);
	instance.xPadding = initXPadding(instance);
	instance.yPadding = initYPadding(instance);
	instance.y2Padding = initY2Padding(instance);
	instance.xMinStep = initXMinStep(instance);
	instance.yMinStep = initYMinStep(instance);
	instance.y2MinStep = initY2MinStep(instance);
	instance.xFlipAxis = initFlipAxis(instance);
	instance.yFlipAxis = initFlipAxis(instance);
	instance.y2FlipAxis = initFlipAxis(instance);
	instance.xZeroAxis = initZeroAxis(instance);
	instance.yZeroAxis = initZeroAxis(instance);
	instance.y2ZeroAxis = initZeroAxis(instance);
	instance.xHide = initHide(instance);
	instance.yHide = initHide(instance);
	instance.y2Hide = initHide(instance);

	instance.y2Hide(true);

	instance.update = initUpdate(instance, state);

	return instance;
}


export default initChartLayout;
