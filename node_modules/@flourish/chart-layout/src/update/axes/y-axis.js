import { select } from "d3-selection";
import { remToPx, xyToTranslate, angleToRotate, linesIntersect, safeScale } from "../../common";
import { tickSorter, userSelectNone, getDirectionAttribute } from "./common";


function initYAxisUpdating(instance, state) {
	var left = instance.chart.select("g.fl-left-axis");
	var line_container = left.select("g.fl-axis-line");
	var tick_container = left.select("g.fl-axis-ticks");
	var title_container = left.select("g.fl-axis-title");
	var y = state.y;
	var oldXScale;
	var oldYScale;
	var y_bottom_old, y_top_old;
	var x_left_old;

	return function() {
		var measurements = {};
		var show_this_axis = y.axis_visible && !instance.yHide();
		var xScale = safeScale(instance.xScale());
		var yScale = safeScale(instance.yScale());
		var ticks = show_this_axis ? instance.yTicks() : [];
		var animation_duration = oldXScale ? instance.animationDuration() : 0;
		if (!oldXScale) oldXScale = xScale;
		if (!oldYScale) oldYScale = yScale;
		var enteringYScale = oldYScale.type === yScale.type && yScale.type !== "ordinal" ? oldYScale : yScale;
		var exitingYScale = oldYScale.type === yScale.type && oldYScale.type !== "ordinal" ? yScale : oldYScale;
		var y_bottom = instance.y_bottom;
		var y_top = instance.y_top;
		if (y_bottom_old === undefined) y_bottom_old = y_bottom;
		if (y_top_old === undefined) y_top_old = y_top;
		var x_left = instance.x_left;
		if (x_left_old === undefined) x_left_old = x_left;

		var line_color = y.line_and_tick_color;
		var line_width = remToPx(y.line_and_tick_width, true);
		var tick_label_color = y.tick_label_color;

		var ticks_labels_side = y.tick_label_position === "default";
		var ticks_out = y.tick_side === "out";

		var tick_padding = remToPx(y.tick_padding);
		var axis_width = instance.yTicks().max_box_width + tick_padding;
		var tick_length = ticks_labels_side ? (remToPx(y.tick_length) * (ticks_out ? 1 : -1)) : axis_width;
		var tick_label_size = remToPx(y.tick_label_size);
		var tick_label_distance = (ticks_out && ticks_labels_side ? tick_length : 0) + tick_padding;

		var title_text = instance.yTitle();
		var title_size = remToPx(y.title_size);
		var title_distance = tick_label_distance + ticks.max_box_width + remToPx(y.title_padding) + 0.33 * title_size;
		measurements.extended_gridline = x_left - (tick_label_distance + ticks.max_box_width);

		var y_mid = (y_top + y_bottom) / 2;

		var line = line_container.selectAll("line")
			.data(show_this_axis && y.line_visible ? [yScale.domain()] : []);

		line.exit()
			.style("stroke", line_color)
			.style("stroke-width", line_width)
			.transition()
			.duration(animation_duration)
			.attr("x1", x_left)
			.attr("x2", x_left)
			.attr("y1", y_bottom)
			.attr("y2", y_top)
			.style("opacity", 0)
			.remove();

		var line_enter = line.enter()
			.append("line")
			.style("shape-rendering", "crispEdges")
			.style("stroke-linecap", "square")
			.style("stroke-width", line_width)
			.attr("x1", x_left_old)
			.attr("x2", x_left_old)
			.attr("y1", y_bottom_old)
			.attr("y2", y_top_old)
			.style("opacity", 0);

		line.merge(line_enter)
			.style("stroke", line_color)
			.style("stroke-width", line_width)
			.transition()
			.duration(animation_duration)
			.attr("x1", x_left)
			.attr("x2", x_left)
			.attr("y1", y_bottom)
			.attr("y2", y_top)
			.style("opacity", 1);

		var sorted_ticks = show_this_axis ? ticks : [];
		if (ticks.type === "numeric" && y.tick_mode !== "custom") {
			sorted_ticks = ticks.slice().sort(tickSorter);
		}

		function tickLabelTransform(d) {
			if (y.tick_label_position !== "default") {
				var x_offset = -tick_label_distance - (ticks.max_box_width - d.box_width);
				var y_offset = y.tick_label_position === "above" ? -0.3 : 1;
				return xyToTranslate(x_offset, y_offset*tick_label_size);
			}
			var angle = -y.tick_label_angle;
			if (angle === 0) {
				return xyToTranslate(-tick_label_distance, 0.33*tick_label_size - d.multiline_offset);
			}
			var transform = xyToTranslate(-tick_label_distance, 0) + " " + angleToRotate(angle);
			if (angle === -90) transform += " " + xyToTranslate(d.text_width/2, 0);
			return transform;
		}

		var tick_g = tick_container.selectAll("g")
			.data(sorted_ticks, function(d) { return d.type + "-" + d.value; });

		var tick_g_exit = tick_g.exit();

		tick_g_exit.transition()
			.duration(animation_duration)
			.attr("transform", function(d) { return xyToTranslate(x_left, exitingYScale(d.value)); })
			.style("opacity", 0)
			.remove();

		tick_g_exit.each(function() {
			var sel = select(this);
			// Tick lines
			sel.select("line")
				.style("stroke", line_color)
				.style("stroke-width", line_width)
				.transition()
				.duration(animation_duration)
				.attr("x2", -tick_length);
			// Tick labels
			sel.select("text")
				.style("fill", tick_label_color)
				.style("font-size", tick_label_size + "px")
				.style("font-weight", y.tick_label_weight)
				.attr("transform", tickLabelTransform)
				.transition()
				.duration(animation_duration);
		});

		var tick_g_enter = tick_g.enter().append("g")
			.style("opacity", 0);

		tick_g_enter
			.attr("transform", function(d) { return xyToTranslate(x_left_old, enteringYScale(d.value)); });

		const read_direction = getDirectionAttribute();
		const text_anchor = read_direction === "rtl" ? "start" : "end";

		tick_g_enter.each(function() {
			var sel = select(this);
			// Tick lines
			sel.append("line")
				.attr("x2", -tick_length);
			// Tick labels
			sel.append("text")
				.attr("text-anchor", text_anchor)
				.attr("transform", tickLabelTransform)
				.call(userSelectNone);
		});

		var tick_g_update = tick_g.merge(tick_g_enter);

		tick_g_update.transition()
			.duration(animation_duration)
			.style("opacity", 1)
			.attr("transform", function(d) { return xyToTranslate(x_left, yScale(d.value)); });

		var setTickOpacity = (function() {
			var placed_ticks = [];
			var x_anchor = x_left - tick_label_distance;
			return function(d) {
				var y_anchor = yScale(d.value);
				var p1q1 = [ x_anchor, y_anchor ];
				var p2 = [ x_anchor - d.box_width_above, y_anchor - d.box_height_above];
				var q2 = [ x_anchor - d.box_width_below, y_anchor + d.box_height_below];
				var p = [ p1q1, p2 ];
				var q = [ p1q1, q2 ];
				for (var i = 0; i < placed_ticks.length; i++) {
					var placed_tick = placed_ticks[i];
					if (y_anchor >= placed_tick.y_anchor) {
						if (linesIntersect(p, placed_tick.q)) return 0;
					}
					else {
						if (linesIntersect(placed_tick.p, q)) return 0; // eslint-disable-line no-lonely-if
					}
				}
				placed_ticks.push({ y_anchor: y_anchor, p: p, q: q });
				return 1;
			};
		})();

		tick_g_update.each(function() {
			var sel = select(this);
			// Tick lines
			sel.select("line")
				.style("stroke", line_color)
				.style("stroke-width", line_width)
				.transition()
				.duration(animation_duration)
				.attr("x2", -tick_length);
			// Tick labels
			sel.select("text")
				.each(function() {
					var tspans = select(this).selectAll("tspan").data(function(d) { return d.lines; });
					tspans.merge(tspans.enter().append("tspan"))
						.attr("x", 0)
						.attr("dy", function(d, i) { return i ? y.tick_label_line_height + "em" : 0; })
						.text(function(d) { return d; });
					tspans.exit().remove();
				})
				.style("fill", tick_label_color)
				.style("font-size", tick_label_size + "px")
				.style("font-weight", y.tick_label_weight)
				.attr("text-anchor", text_anchor)
				.transition()
				.duration(animation_duration)
				.style("opacity", setTickOpacity)
				.attr("transform", tickLabelTransform);
		});

		var title = title_container.selectAll("text")
			.data(show_this_axis && title_text ? [title_text] : []);

		title.exit().remove();

		var getTitleTransform = function() {
			return xyToTranslate(x_left, y_mid) + " " + angleToRotate(-90) + " " + xyToTranslate(0, -title_distance);
		};

		title.enter().append("text")
			.attr("text-anchor", "middle")
			.style("font-size", title_size + "px")
			.style("fill", y.title_color)
			.style("font-weight", y.title_weight)
			.call(userSelectNone)
			.transition()
			.duration(0)
			.delay(animation_duration)
			.text(function(d) { return d; })
			.attr("x", 0)
			.attr("y", 0)
			.attr("transform", getTitleTransform);

		title.text(function(d) { return d; })
			.style("fill", y.title_color)
			.style("font-size", title_size + "px")
			.style("font-weight", y.title_weight)
			.transition()
			.duration(animation_duration)
			.attr("x", 0)
			.attr("y", 0)
			.attr("transform", getTitleTransform);

		oldXScale = xScale;
		oldYScale = yScale;
		y_bottom_old = y_bottom;
		y_top_old = y_top;
		x_left_old = x_left;

		return measurements;
	};
}


export { initYAxisUpdating };
