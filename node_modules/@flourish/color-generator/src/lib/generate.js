import { color as d3_color } from "d3-color";

var GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;
var DEFAULT_ANGLE = 360 / GOLDEN_RATIO;
var DEFAULT_COLOR = "#FF0000";


function hueRotationGenerator(colorSpace, second_channel_name, third_channel_name) {
	return function (init_colors, angle) {
		if (!Array.isArray(init_colors)) init_colors = init_colors ? [ init_colors ] : [ DEFAULT_COLOR ];
		angle = angle !== undefined ? angle : DEFAULT_ANGLE;

		// Convert colors to colorspace of choice
		var palette = init_colors.map(function(col) { return colorSpace(col); })
			.filter(function(col) { return !isNaN(col[second_channel_name]) && !isNaN(col[third_channel_name]); });

		if (!palette.length) palette = [colorSpace(DEFAULT_COLOR)];
		var n = palette.length;

		// Get average values of second and third channels
		var second_channel = palette.reduce(function(a, col) { return (a + col[second_channel_name]); }, 0) / n;
		var third_channel = palette.reduce(function(a, col) { return a + col[third_channel_name]; }, 0) / n;

		var counter = n;
		var h_init;
		do h_init = palette[--counter].h; // Try to base initial hue on last color that isn't grey
		while (isNaN(h_init) && counter > 0); // Grey hue is NaN

		var i = 0;

		return function nextColor() {
			var rotation = ++i * angle;
			var h = (h_init + rotation) % 360;
			return d3_color(colorSpace(h, second_channel, third_channel)).hex();
		};
	};
}


export { hueRotationGenerator };
