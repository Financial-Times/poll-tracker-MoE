import { scaleDiverging } from "d3-scale";
import { interpolateBrBG, interpolatePiYG, interpolatePRGn, interpolatePuOr, interpolateRdBu, interpolateRdGy, interpolateRdYlBu, interpolateRdYlGn, interpolateSpectral } from "d3-scale-chromatic";
import { interpolateHcl, interpolateHsl, interpolateLab, interpolateRgb, piecewise } from "d3-interpolate";
import { binnedScale } from "../common/binning";
import { getDomain } from "../common/domain";

var INTERPOLATORS = Object.freeze({
	BrBG: interpolateBrBG,
	PiYG: interpolatePiYG,
	PRGn: interpolatePRGn,
	PuOr: interpolatePuOr,
	RdBu: interpolateRdBu,
	RdGy: interpolateRdGy,
	RdYlBu: interpolateRdYlBu,
	RdYlGn: interpolateRdYlGn,
	Spectral: interpolateSpectral
});

var INTERPOLATOR_GENERATORS = {
	hcl: interpolateHcl,
	hsl: interpolateHsl,
	lab: interpolateLab,
	rgb: interpolateRgb,
};

function getCustomInterpolator(state) {
	var color_space = state.diverging_color_space;
	var min = state.diverging_custom_min;
	var mid = state.diverging_custom_mid;
	var max = state.diverging_custom_max;
	return piecewise(INTERPOLATOR_GENERATORS[color_space], [min, mid, max]);
}


function getDivergingFunction(state, values) {
	var extent = getDomain(values);
	var midpoint = extent[0] < 0 && extent[1] > 0 ? 0 : (extent[0] + extent[1]) / 2;
	var domain = [extent[0], midpoint, extent[1]];

	if (state.diverging_custom_domain) {
		if (state.binning) domain[1] = state.diverging_domain_mid;
		else domain = [state.diverging_domain_min, state.diverging_domain_mid, state.diverging_domain_max];
	}

	var interpolate = function(t) {
		var interpolation = INTERPOLATORS[state.diverging_palette] || getCustomInterpolator(state);
		if (state.diverging_reverse) return interpolation(1 - t);
		else return interpolation(t);
	};

	var scale = scaleDiverging(interpolate).domain(domain);
	var colorScale = function (value) {
		return !isNaN(value) ? scale(value) : null;
	};

	colorScale.domain = Object.freeze(domain);
	colorScale.midpoint = state.diverging_custom_domain ? state.diverging_domain_mid : midpoint;

	if (!state.binning) return colorScale;
	else return binnedScale(state, domain, values, colorScale);
}


export { getDivergingFunction };
