import { scaleSequential } from "d3-scale";
import { interpolateBlues, interpolateBuGn, interpolateBuPu, interpolateCool, interpolateCubehelixDefault, interpolateGnBu, interpolateGreens, interpolateGreys, interpolateInferno, interpolateMagma, interpolateOranges, interpolateOrRd, interpolatePlasma, interpolatePuBu, interpolatePuBuGn, interpolatePuRd, interpolatePurples, interpolateRdPu, interpolateReds, interpolateViridis, interpolateWarm, interpolateYlGn, interpolateYlGnBu, interpolateYlOrBr, interpolateYlOrRd } from "d3-scale-chromatic";
import { interpolateHcl, interpolateHsl, interpolateLab, interpolateRgb, interpolateRgbBasis } from "d3-interpolate";
import { binnedScale } from "../common/binning";
import { getDomain } from "../common/domain";

var CARROTS = Object.freeze(["#efeca4", "#e9e28f", "#dccf64", "#e3b23c", "#e49547", "#e37746", "#dc5b36", "#cb4144", "#bb2244", "#972545", "#6a2c4f"]);

var INTERPOLATORS = Object.freeze({
	Blues: interpolateBlues,
	BuGn: interpolateBuGn,
	BuPu: interpolateBuPu,
	Carrots: interpolateRgbBasis(CARROTS),
	Cool: interpolateCool,
	CubehelixDefault: interpolateCubehelixDefault,
	GnBu: interpolateGnBu,
	Greens: interpolateGreens,
	Greys: interpolateGreys,
	Inferno: interpolateInferno,
	Magma: interpolateMagma,
	Oranges: interpolateOranges,
	OrRd: interpolateOrRd,
	Plasma: interpolatePlasma,
	PuBu: interpolatePuBu,
	PuBuGn: interpolatePuBuGn,
	PuRd: interpolatePuRd,
	Purples: interpolatePurples,
	RdPu: interpolateRdPu,
	Reds: interpolateReds,
	Viridis: interpolateViridis,
	Warm: interpolateWarm,
	YlGn: interpolateYlGn,
	YlGnBu: interpolateYlGnBu,
	YlOrBr: interpolateYlOrBr,
	YlOrRd: interpolateYlOrRd
});

var INTERPOLATOR_GENERATORS = {
	hcl: interpolateHcl,
	hsl: interpolateHsl,
	lab: interpolateLab,
	rgb: interpolateRgb,
};

function getCustomInterpolator(state) {
	var color_space = state.sequential_color_space;
	var min = state.sequential_custom_min;
	var max = state.sequential_custom_max;
	return INTERPOLATOR_GENERATORS[color_space](min, max);
}

function getSequentialFunction(state, values) {
	var domain = state.sequential_custom_domain && !state.binning ? [state.sequential_domain_min, state.sequential_domain_max] : getDomain(values);
	var interpolate = function (t) {
		var interpolation = INTERPOLATORS[state.sequential_palette] || getCustomInterpolator(state);
		if (state.sequential_reverse) return interpolation(1 - t);
		else return interpolation(t);
	};
	var scale = scaleSequential(interpolate).domain(domain);
	var colorScale = function (value) {
		return !isNaN(value) ? scale(value) : null;
	};
	colorScale.domain = Object.freeze(domain);
	if (!state.binning) return colorScale;
	else return binnedScale(state, domain, values, colorScale);
}

export { getSequentialFunction };
