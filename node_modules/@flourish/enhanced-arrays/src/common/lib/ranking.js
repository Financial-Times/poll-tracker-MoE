// 1 2 2 4
function best(sorted_values, lowest_first) {
	var reducer = lowest_first ? "reduce" : "reduceRight";
	var rank = 1;
	return sorted_values[reducer](function(lookup, d) {
		if (!lookup[d]) lookup[d] = rank;
		rank += 1;
		return lookup;
	}, {});
}

// 1 3 3 4
function worst(sorted_values, lowest_first) {
	var reducer = lowest_first ? "reduce" : "reduceRight";
	var rank = 1;
	return sorted_values[reducer](function(lookup, d) {
		lookup[d] = rank++;
		return lookup;
	}, {});
}

// 1 2 2 3
function dense(sorted_values, lowest_first) {
	var reducer = lowest_first ? "reduce" : "reduceRight";
	var rank = 1;
	return sorted_values[reducer](function(lookup, d) {
		if (!lookup[d]) lookup[d] = rank++;
		return lookup;
	}, {});
}

// 1 2.5 2.5 4
function fractional(sorted_values, lowest_first) {
	var ll = best(sorted_values, lowest_first);
	var hl = worst(sorted_values, lowest_first);
	return Object.keys(ll).reduce(function(obj, key) {
		obj[key] = (ll[key] + hl[key]) / 2;
		return obj;
	}, {});
}


function rank(unsorted_values, sorted_values, lowest_first, ties_method) {
	var lookup;
	if (ties_method === "dense") lookup = dense(sorted_values, lowest_first);
	else if (ties_method === "fractional") lookup = fractional(sorted_values, lowest_first);
	else if (ties_method === "worst") lookup = worst(sorted_values, lowest_first);
	else lookup = best(sorted_values, lowest_first);

	var mapFunc = function(d) { return lookup[d]; };
	// ties_method ordinal (1 2 3 4) uses lowest lookup but then modifies it in place
	if (ties_method === "ordinal") mapFunc = function(d) { return lookup[d]++; };

	return unsorted_values.map(mapFunc);
}

export { rank };
