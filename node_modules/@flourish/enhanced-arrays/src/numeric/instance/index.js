import { createAdder, identity } from "../../common";
import { ascending, isAscending, isDescending } from "../utils";


function init(obj, input_data, accessor) {
	accessor = accessor || identity;

	var min = Infinity;
	var max = -Infinity;
	var sorted_values = null;
	var sum = 0;
	var dropped_indexes = [];

	var values = Object.freeze(input_data.reduce(function(arr, d, i) {
		var value = accessor(d);
		if (typeof value === "number" && !isNaN(value)) {
			arr.push(value);
			min = Math.min(min, value);
			max = Math.max(max, value);
			sum += value;
		}
		else dropped_indexes.push(i);
		return arr;
	}, []));

	var add = createAdder(obj);

	add.prop("enhanced_array", true);
	add.prop("numeric_array", true);
	add.prop("values", values);
	add.prop("min", values.length ? min : null);
	add.prop("max", values.length ? max : null);
	add.prop("sum", sum);
	add.prop("mean", values.length ? sum / values.length : null);
	add.prop("range", values.length ? max - min : null);
	add.prop("length", values.length);
	add.prop("dropped_indexes", Object.freeze(dropped_indexes));
	add.method("extent", function() { return [this.min, this.max]; });

	add.getter("sorted_values", function() {
		if (!sorted_values) {
			if (isAscending(values)) sorted_values = values;
			if (isDescending(values)) sorted_values = Object.freeze(values.slice().reverse());
			else sorted_values = Object.freeze(values.slice().sort(ascending));
		}
		return sorted_values;
	});

	return obj;
}


export default init;
