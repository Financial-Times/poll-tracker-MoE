import { createAdder, identity } from "../../common";
import { isAscending, isDescending } from "../utils";


function init(obj, input_data, accessor) {
	accessor = accessor || identity;

	var sorted_values = null;
	var dropped_indexes = [];
	var n_empty = 0;

	var min = null;
	var i = 0;
	while (min === null && i < input_data.length) {
		var val = accessor(input_data[i++]);
		if (typeof val === "string") min = val;
	}
	var max = min;

	var values = Object.freeze(input_data.reduce(function(arr, d, i) {
		var value = accessor(d);
		if (typeof value === "string") {
			arr.push(value);
			min = value < min ? value : min;
			max = value > max ? value : max;
			if (!value) n_empty++;
		}
		else dropped_indexes.push(i);
		return arr;
	}, []));

	var add = createAdder(obj);

	add.prop("enhanced_array", true);
	add.prop("string_array", true);
	add.prop("values", values);
	add.prop("min", min);
	add.prop("max", max);
	add.prop("length", values.length);
	add.prop("dropped_indexes", Object.freeze(dropped_indexes));
	add.prop("n_empty", n_empty);
	add.method("extent", function() { return [this.min, this.max]; });

	add.getter("sorted_values", function() {
		if (!sorted_values) {
			if (isAscending(values)) sorted_values = values;
			if (isDescending(values)) sorted_values = Object.freeze(values.slice().reverse());
			else sorted_values = Object.freeze(values.slice().sort());
		}
		return sorted_values;
	});

	return obj;
}


export default init;
