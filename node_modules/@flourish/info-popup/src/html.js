function getDefaultHTML(instance, d, mode) {
	var html = "<div class='flourish-panel-content-inner'>";
	var custom_default = instance["_" + mode + "_default_template"];
	var list_mode = instance._state[mode + "_list_type"];
	var separator = instance._state[mode + "_list_separator"];
	var separator_is_line_break = separator === "<br />";
	var character_separator = separator_is_line_break ? "" : separator;
	var line_break = separator_is_line_break ? separator : "";

	if (!custom_default) {
		// By default just show all the selected columns
		var col_name;
		var col_names_in_popup = {};
		if (d[instance._title_key] || d[instance._subtitle_key]) {
			html += "<header>";
			if (d[instance._title_key]) {
				html += "<h1>" + d[instance._title_key] + "</h1>";
				col_name = instance._column_names[instance._title_key];
				col_names_in_popup[col_name] = true;
			}
			if (d[instance._subtitle_key]) {
				html += "<h2>" + d[instance._subtitle_key] + "</h2>";
				col_name = instance._column_names[instance._subtitle_key];
				col_names_in_popup[col_name] = true;
			}
			html += "</header>";
		}
		var main_content = "";
		for (var binding in instance._column_names) {
			if (binding == instance._title_key) continue;
			if (binding == instance._subtitle_key) continue;
			else if (Array.isArray(d[binding])) {
				for (var m = 0; m < d[binding].length; m++) {
					col_name = instance._column_names[binding][m];
					if (col_names_in_popup[col_name]) continue;
					col_names_in_popup[col_name] = true;
					if (list_mode == "table") main_content += "<tr><td class='table-col-label'><span class='data-heading'>" + col_name + "</span></td><td class='table-col-value'>" + d[binding][m] + "</td></tr>";
					else if (list_mode == "ul") main_content += "<li><span class='data-heading'>" + col_name + character_separator +" </span> "+ line_break + d[binding][m] + "</li>";
				}
			}
			else {
				col_name = instance._column_names[binding];
				if (col_names_in_popup[col_name]) continue;
				col_names_in_popup[col_name] = true;
				if (list_mode == "table") main_content += "<tr><td class='table-col-label'><span class='data-heading'>" + col_name + "</span></td><td class='table-col-value'>" + d[binding] + "</td></tr>";
				else if (list_mode == "ul") main_content += "<li><span class='data-heading'>" + col_name + character_separator + " </span> " + line_break + d[binding] + "</li>";
			}
		}
		if (main_content !== "") {
			html += "<div class='main-content'><" + list_mode + ">";
			html += main_content;
			html += "</" + list_mode + "></div></div>";
		}
	}
	else {
		html += custom_default.replace(/\{\{((?:[^}]|\}[^}])*)\}\}/g, function(_, target_col_name) {
			var value;
			if (Array.isArray(instance._column_names[target_col_name])) {
				var column_name = instance._column_names[target_col_name];
				if (column_name.length == 0) return "";
				value = "<ul>";
				column_name.forEach(function(name, i) {
					value += "<li>" + name + separator + d[target_col_name][i] + "</li>";
				});
				value += "</ul>";
			}
			else {
				value = d[target_col_name];
			}
			if (value !== undefined) return value;
			return "";
		});
	}
	return html;
}

function getValueFromColumnName(instance, target_col_name, d) {
	var value;
	Object.keys(instance._column_names).some(function(key) {
		if (Array.isArray(instance._column_names[key])) {
			var index = instance._column_names[key].indexOf(target_col_name);
			if (index >= 0) {
				value = d[key][index];
				return true;
			}
		}
		else if (instance._column_names[key] == target_col_name) {
			value = d[key];
			return true;
		}
	});
	if (value !== undefined) return value;
	return "";
}

function getCustomHTML(instance, content_header_raw, content_main_raw, d) {
	var content = "";

	// TODO. Add handlebars proper to extend this to support else statements and nested conditions
	var content_header_parsed = getParsedContent(content_header_raw, instance, d);
	var content_main_parsed = getParsedContent(content_main_raw, instance, d);

	if (content_header_parsed) content += "<header>" + content_header_parsed + "</header>";
	if (content_main_parsed) content += "<div class='main-content'>" + content_main_parsed + "</div>";

	return content;
}

function getParsedContent(content_raw, instance, d) {
	var condition_regex = /\{\{#if ((?:[^}]|\}[^}])*)\}\}([\s\S]*?)\{\{\/if\}\}/g;
	var variable_regex = /\{\{((?:[^}]|\}[^}])*)\}\}/g;
	return content_raw
		.replace(condition_regex, function (_, target_col_name, if_contents) {
			return getValueFromColumnName(instance, target_col_name, d) == "" ? "" : if_contents;
		})
		.replace(variable_regex, function (_, target_col_name) {
			return getValueFromColumnName(instance, target_col_name, d);
		}).trim();
}

export function getPopupHTML(instance, d, teaser) {
	var html = "";
	if (teaser && !instance._state.popup_is_custom) html += "<div class='main-content'>" + instance._state.popup_teaser_default + "</div>";
	else if (!teaser && !instance._state.popup_is_custom) html += getDefaultHTML(instance, d, "popup");
	else html += getCustomHTML(instance, instance._state.popup_custom_header, instance._state.popup_custom_main, d);
	return html;
}

export function getPanelHTML(instance, d) {
	var html = "";
	if (!instance._state.panel_is_custom) html += getDefaultHTML(instance, d, "panel");
	else html += getCustomHTML(instance, instance._state.panel_custom_header, instance._state.panel_custom_main, d);
	return html;
}
