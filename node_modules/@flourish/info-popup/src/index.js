import Popup from "@flourish/popup";
import Panel from "./panel";

import DEFAULTS from "./defaults";
import { getPopupHTML, getPanelHTML } from "./html";
import { updateStyle } from "./style";

function InfoPopup(state, panel_container, popup_container) {
	var instance = this;
	this._state = state;
	this._popup_default_template = null;
	this._panel_default_template = null;
	this._title_key = "name";
	this._subtitle_key = null;
	this._first_load = true;
	this._on_panel_close = null;
	this._show_default_content_timer = null;
	this._panel_container = panel_container || document.body;
	this._popup_container = popup_container || document.body;
	this._popup_directions = ["top", "bottom", "left", "right"];
	this._getLockedPosition = function() { return null; };

	for (var key in DEFAULTS) {
		if (state[key] == undefined) state[key] = DEFAULTS[key];
	}

	this.panel = Panel().container(this._panel_container).on("close", function() {
		instance._state.locked_id = null;
		instance.popup.hide();
		if (typeof instance._on_panel_close == "function") instance._on_panel_close();
	});
	this.popup = Popup().container(this._popup_container).point(0, 0).draw().hide();
}

// ============ //
// INIT METHODS //
// ============ //

InfoPopup.prototype.getLockedPosition = function(getLockedPositionFunction) {
	if (typeof getLockedPositionFunction != "function") {
		console.error("Invalid function passed to @flourish/info-popup getLockedPosition");
	}
	else this._getLockedPosition = getLockedPositionFunction;
	return this;
};

// ====== //
// UDPATE //
// ====== //

InfoPopup.prototype.update = function(callback) {
	if (this._state.locked_id !== null && this._state.mode != "none") {
		var selected = this._getLockedPosition(this._state.locked_id);
		if (selected) this.click(selected[0], selected[1], this._state.locked_id, callback);
		else console.warn("@flourish/info-popup: failed to return value from getLockedPosition function");
	}
	else this.clickout();
};

// ============= //
// EVENT METHODS //
// ============= //

function disablePopupPointerEvents(instance) {
	instance.popup._getElement().querySelector(".flourish-popup-content").style.pointerEvents = "none";
}

function enablePopupPointerEvents(instance) {
	instance.popup._getElement().querySelector(".flourish-popup-content").style.pointerEvents = "auto";
}

InfoPopup.prototype.click = function(coords_or_node, d, id, callback) {
	if (this._state.mode == "none") return;
	var target = this._state.mode == "popup" ? "popup" : "panel";
	if (this._checkIfPopupIsEmpty(d, target)) {
		target === "panel" ? this.hidePanel() : this.hidePopup();
		return;
	}
	// TODO: Check if popup content is empty
	this._point(coords_or_node);
	if (id != undefined) {
		this._state.locked_id = id;
		enablePopupPointerEvents(this);
	}
	else this._state.locked_id = null;
	if (target == "panel") {
		clearTimeout(this._show_default_content_timer);
		this.popup.hide();
		this._drawPanel(d, callback);
	}
	else if (target == "popup") {
		this.panel.hide();
		this._drawPopup(d, callback);
	}
};

InfoPopup.prototype.clickout = function() {
	this._state.locked_id = null;
	if (this._state.mode == "both" || this._state.mode == "panel") {
		this.popup.draw(); // call draw to resize constrainer, if necessary
		this.popup.hide();
		if (this._state.panel_position == "overlay" || !this._state.panel_side_fixed) {
			this.panel.hide();
		}
		else this._showDefaultPanelContent();
	}
	if (this._state.mode == "popup") {
		this.panel.hide();
		this.popup.draw(); // call draw to resize constrainer, if necessary
		this.popup.hide();
	}
};

InfoPopup.prototype.touch = function(coords_or_node, d, id, callback) {
	this.mouseover(coords_or_node, d, callback, true, id);
};

InfoPopup.prototype.mouseover = function(coords_or_node, d, callback, touch, touch_id) {
	var target = this._state.mode == "panel" ? "panel" : "popup";
	if (this._checkIfPopupIsEmpty(d, target, this._state.mode == "both")) {
		target === "panel" ? this.hidePanel() : this.hidePopup();
		return;
	}
	var instance = this;
	if (this._state.mode == "both") {
		this._point(coords_or_node);
		this._drawPopup(d, callback, true);
		touch ? enablePopupPointerEvents(this) : disablePopupPointerEvents(this);
		if (touch) {
			var popup_contents = instance.popup._getElement().querySelector(".flourish-popup-content");
			popup_contents.onclick = function() {
				instance.click(coords_or_node, d, touch_id, callback);
			};
		}
	}
	if (this._state.mode == "popup") {
		if (this._state.locked_id !== null) return;
		disablePopupPointerEvents(this);
		this._point(coords_or_node);
		this._drawPopup(d, callback);
	}
	if (this._state.mode == "panel") {
		if (this._state.locked_id !== null || this._state.panel_position == "overlay") return;
		if (!this._state.panel_side_fixed) return;
		clearTimeout(this._show_default_content_timer);
		this._point(coords_or_node);
		this._drawPanel(d, callback);
	}
};

InfoPopup.prototype.mouseout = function() {
	if (this._state.mode == "both") {
		this.popup.hide();
	}
	if (this._state.mode == "popup") {
		if (this._state.locked_id !== null) return;
		this.popup.hide();
	}
	if (this._state.mode == "panel") {
		if (this._state.locked_id !== null) return;
		if (this._state.panel_position == "overlay" || !this._state.panel_side_fixed) return;
		this._showDefaultPanelContent();
	}
};

// ======= //
// GETTERS //
// ======= //

InfoPopup.prototype.locked = function() {
	return this._state.locked_id;
};

InfoPopup.prototype.mode = function () {
	return this._state.mode;
};

// ====================== //
// DATA & CONTENT METHODS //
// ====================== //

InfoPopup.prototype.setColumnNames = function(column_names) {
	this._column_names = column_names;

	return this;
};

InfoPopup.prototype._showDefaultPanelContent = function () {
	var instance = this;
	clearTimeout(this._show_default_content_timer);
	// This delays the return to the default content by 100ms, to avoid
	// a "strobe" effect if you are quickly moving in and out of data points
	// e.g. on a map
	this._show_default_content_timer = setTimeout(function () {
		instance.panel.html(instance._state.panel_side_default_content);
		instance._drawPanel();
	}, 100);
	// We do, however, immediately call the drawPanel function to make sure
	// the margins() measurement is correct, rather than stuck with the old
	// values at the time of being called.
	instance._drawPanel();
};

InfoPopup.prototype._checkIfPopupIsEmpty = function (d, target, teaser) {
	var popup_content = target == "panel" ? getPanelHTML(this, d) : getPopupHTML(this, d, teaser);
	return popup_content.trim() == "";
};

// =================== //
// DRAW & HIDE METHODS //
// =================== //

InfoPopup.prototype.onPanelClose = function(f) {
	this._on_panel_close = f;
	return this;
};

InfoPopup.prototype._drawPopup = function(d, callback, teaser) {
	if (d) this.popup.html(getPopupHTML(this, d, teaser));
	updateStyle(this);
	this.popup.draw();
	if (callback) callback(this.popup._getElement(), d);
	return this;
};

InfoPopup.prototype._drawPanel = function(d, callback) {
	var instance = this;
	updateStyle(instance);
	this.panel
		.open_duration(this._state.panel_open_duration)
		.close_duration(this._state.panel_close_duration)
		.width_overlay(this._state.panel_width_overlay)
		.height_overlay(this._state.panel_height_overlay)
		.vertical_position(this._state.panel_vertical_position)
		.width_side(this._state.panel_width_side)
		.height_side(this._state.panel_height_side)
		.position(this._state.panel_position)
		.max_width(this._state.panel_max_width)
		.max_height(this._state.panel_max_height)
		.closeable(this._state.panel_position == "overlay" || !this._state.panel_side_fixed);
	if (d === undefined) this.panel.draw();
	else this.panel.html(getPanelHTML(instance, d, "panel")).draw();
	if (callback) callback(this.panel._getElement(), d);
	return this;
};

InfoPopup.prototype.hidePanel = function() {
	this.panel.hide();
	return this;
};

InfoPopup.prototype.hidePopup = function () {
	this.popup.hide();
	return this;
};

// ================== //
// POSITIONAL METHODS //
// ================== //

InfoPopup.prototype.popupDirections = function(value) {
	if (!value) return this._popup_directions.slice();
	this._popup_directions = value;
	return this;
};

InfoPopup.prototype.margins = function() {
	return this.panel.margins();
};

InfoPopup.prototype._getBiggestGap = function(node_bbox) {
	var constrainer_bbox = this._popup_container.getBoundingClientRect();
	var best_side, biggest_gap = 0, arrow_directions;
	var gaps = {
		"right": ((constrainer_bbox.width + constrainer_bbox.left) - (node_bbox.width + node_bbox.left)) / constrainer_bbox.width,
		"bottom": ((constrainer_bbox.height + constrainer_bbox.top) - (node_bbox.height + node_bbox.top)) / constrainer_bbox.height,
		"left": (node_bbox.left - constrainer_bbox.left) / constrainer_bbox.width,
		"top": (node_bbox.top - constrainer_bbox.top) / constrainer_bbox.height,
	};


	var all_arrow_directions = {
		"right": ["left", "leftFlexible", "topLeft", "bottomLeft", "bottomFlexible", "bottom", "topFlexible", "top", "bottomRight", "topRight", "rightFlexible", "right"],
		"left": ["right", "rightFlexible", "topRight", "bottomRight", "top", "topFlexible", "bottom", "bottomFlexible", "bottomLeft", "topLeft", "leftFlexible", "left"],
		"top": ["bottom", "bottomFlexible", "bottomRight", "bottomLeft", "rightFlexible", "leftFlexible", "right", "left", "topRight", "topLeft", "topFlexible", "top"],
		"bottom": ["top", "topFlexible", "topLeft", "topRight", "left", "right", "leftFlexible", "rightFlexible", "bottomLeft", "bottomRight", "bottomFlexible", "bottom"]
	};

	for (var side in gaps) {
		if (this._popup_directions.indexOf(side) < 0) continue;
		if (gaps[side] > biggest_gap) {
			biggest_gap = gaps[side];
			best_side = side;
			arrow_directions = all_arrow_directions[side];
		}
	}

	var x = node_bbox.left, y = node_bbox.top;
	if (best_side == "left" || best_side == "right") y += node_bbox.height * 0.5;
	else if (best_side == "bottom") y += node_bbox.height;

	if (best_side == "top" || best_side == "bottom") x += node_bbox.width * 0.5;
	else if (best_side == "right") x += node_bbox.width;

	return {
		"side": best_side,
		"arrow_directions": arrow_directions,
		"x": x,
		"y": y
	};
};

// Point should not often be required by template authors, who
// should generally use the click or mouseover methods
InfoPopup.prototype._point = function(coords_or_node) {
	var x, y, arrow_directions = this._popup_directions;
	if (Array.isArray(coords_or_node)) {
		x = coords_or_node[0];
		y = coords_or_node[1];
	}
	else if (coords_or_node && coords_or_node.getBoundingClientRect) {
		var node_rect = coords_or_node.getBoundingClientRect();
		var best_side = this._getBiggestGap(node_rect);
		x = best_side.x;
		y = best_side.y;
		arrow_directions = best_side.arrow_directions;
	}
	else {
		console.warn("@flourish/info-popup: Invalid positional value passed in point function, should be a coordinates array, or a node. Current value is", coords_or_node);
		return this;
	}
	this.panel.point(coords_or_node);
	this.popup.directions(arrow_directions).point(x, y);
	return this;
};

// ============== //
// CONFIG METHODS //
// ============== //

InfoPopup.prototype.popupDefaultTemplate = function(template) {
	if (template != undefined) {
		this._popup_default_template = template;
		return this;
	}
	else return this._popup_default_template;
};

InfoPopup.prototype.panelDefaultTemplate = function(template) {
	if (template != undefined) {
		this._panel_default_template = template;
		return this;
	}
	else return this._panel_default_template;
};

InfoPopup.prototype.titleKey = function(key) {
	if (key != undefined) {
		this._title_key = key;
		return this;
	}
	else return this._title_key;
};

InfoPopup.prototype.subtitleKey = function(key) {
	if (key != undefined) {
		this._subtitle_key = key;
		return this;
	}
	else return this._subtitle_key;
};

// ==== //
// INIT //
// ==== //

export default function(state, panel_container, popup_container) {
	return new InfoPopup(state, panel_container, popup_container);
}
