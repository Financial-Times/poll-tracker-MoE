(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.layout = factory());
}(this, (function () { 'use strict';

	var style_el;


	function initFontStyles() {
		style_el = document.createElement("style");
		style_el.id = "flourish-page-styles";
		style_el.type = "text/css";
		document.head.appendChild(style_el);
	}


	function updateFontStyles() {
		var breakpoints = ["mobile_small", "mobile_big", "tablet", "desktop", "big_screen"];
		var breakpoint_css = "";

		breakpoints.forEach(function(breakpoint_name, i) {
			var css_media_query = "@media(min-width: " + state["breakpoint_" + breakpoint_name] + "px) {\n";
			var css_font_size = "html { font-size:" + state["font_size_" + breakpoint_name] + "%; }";
			breakpoint_css += (i == 0 ? "" : css_media_query) + css_font_size + (i == 0 ? "" : "\n}") + "\n\n";
		});

		style_el.innerHTML = breakpoint_css;

		// Check if we need to load fonts
		var fonts = [ state.body_font, state.title_font, state.subtitle_font, state.footer_font ];
		fonts.forEach(function(font) {
			if (!font) return;
			var font_already_loaded = false;

			var layout_fonts = document.head.querySelectorAll("link.layout-font");
			for (var i = 0; i < layout_fonts.length; i++) {
				var font_el = layout_fonts[i];
				if (font_el.href == font.url) font_already_loaded = true;
			}

			if (!font_already_loaded) {
				var font_link = document.createElement("link");
				font_link.setAttribute("rel", "stylesheet");
				font_link.setAttribute("href", font.url);
				font_link.className = "layout-font";
				document.head.appendChild(font_link);
			}
		});

		// Check if we need to remove fonts
		var layout_fonts = document.head.querySelectorAll("link.layout-font");
		for (var i = 0; i < layout_fonts.length; i++) {
			var font_el = layout_fonts[i];
			var font_needed = false;
			fonts.forEach(function(font) {
				if (font && font.url == font_el.href) font_needed = true;
			});
			if (!font_needed) font_el.parentElement.removeChild(font_el);
		}

		document.body.style.fontFamily = state.body_font.name;
	}

	var LAYOUTS = Object.freeze({
		"stack-default": [ "header", "controls", "primary", "footer" ],
		"stack-2": [ "primary", "header", "controls", "footer" ],
		"stack-3": [ "header", "primary", "controls", "footer" ],
		"stack-4": [ "controls", "primary", "header", "footer" ],
	});

	function define(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	}

	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}

	function Color() {}

	var darker = 0.7;
	var brighter = 1 / darker;

	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex = /^#([0-9a-f]{3,8})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	define(Color, color, {
	  copy: function(channels) {
	    return Object.assign(new this.constructor, this, channels);
	  },
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  hex: color_formatHex, // Deprecated! Use color.formatHex.
	  formatHex: color_formatHex,
	  formatHsl: color_formatHsl,
	  formatRgb: color_formatRgb,
	  toString: color_formatRgb
	});

	function color_formatHex() {
	  return this.rgb().formatHex();
	}

	function color_formatHsl() {
	  return hslConvert(this).formatHsl();
	}

	function color_formatRgb() {
	  return this.rgb().formatRgb();
	}

	function color(format) {
	  var m, l;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
	      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
	      : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
	      : l === 4 ? new Rgb((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
	      : null) // invalid hex
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (-0.5 <= this.r && this.r < 255.5)
	        && (-0.5 <= this.g && this.g < 255.5)
	        && (-0.5 <= this.b && this.b < 255.5)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
	  formatHex: rgb_formatHex,
	  formatRgb: rgb_formatRgb,
	  toString: rgb_formatRgb
	}));

	function rgb_formatHex() {
	  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
	}

	function rgb_formatRgb() {
	  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	  return (a === 1 ? "rgb(" : "rgba(")
	      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	      + (a === 1 ? ")" : ", " + a + ")");
	}

	function hex(value) {
	  value = Math.max(0, Math.min(255, Math.round(value) || 0));
	  return (value < 16 ? "0" : "") + value.toString(16);
	}

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  formatHsl: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "hsl(" : "hsla(")
	        + (this.h || 0) + ", "
	        + (this.s || 0) * 100 + "%, "
	        + (this.l || 0) * 100 + "%"
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}

	var getTextWidth = (function() {
		var context = document.createElement("canvas").getContext("2d");
		return function(text, font) {
			context.font = font || "10px sans-serif";
			var metrics = context.measureText(text);
			return metrics.width;
		};
	})();

	function isUrl(string) {
		if (typeof string != "string") return false;
		return string.match(/^(https?:\/\/|data:)/i) != null;
	}

	var header_el, title_el, subtitle_el, text_el, logo_el;

	function init() {
		header_el = document.createElement("header");
		header_el.className = "flourish-header";

		var hgroup_el = document.createElement("hgroup");
		title_el = document.createElement("h1");
		subtitle_el = document.createElement("h2");
		text_el = document.createElement("p");
		logo_el = document.createElement("img");

		header_el.appendChild(logo_el);
		header_el.appendChild(hgroup_el);
		hgroup_el.appendChild(title_el);
		hgroup_el.appendChild(subtitle_el);
		header_el.appendChild(text_el);

		return header_el;
	}


	function update() {
		header_el.style.textAlign = state.header_align;
		header_el.style.margin = 0;
		header_el.style.borderTop = state.header_border == "top" ? state.header_border_width + "px " + state.header_border_style + " " + state.header_border_color : null;
		header_el.style.borderBottom = state.header_border == "bottom" ? state.header_border_width + "px " + state.header_border_style + " " + state.header_border_color : null;
		header_el.style.paddingTop = state.header_border == "top" ? state.header_border_space + "rem" : "";
		header_el.style.paddingBottom = state.header_border == "bottom" ? state.header_border_space + "rem" : "";

		title_el.innerHTML = state.title ? state.title : "";
		title_el.style.fontFamily = state.title_font ? state.title_font.name : "inherit"; // Check for inherit, then font name
		title_el.style.fontSize = (state.title_size != "custom" ? state.title_size : state.title_size_custom) + "rem";
		title_el.style.lineHeight = state.title_line_height;
		title_el.style.fontWeight = state.title_weight;
		title_el.style.color = state.title_color || state.font_color;
		title_el.style.margin = 0;
		title_el.style.paddingTop = !state.title ? 0 : (state.title_space_above == "custom" ? state.title_space_above_custom : state.title_space_above) + "rem";

		subtitle_el.innerHTML = state.subtitle ? state.subtitle : "";
		subtitle_el.style.fontFamily = state.subtitle_font ? state.subtitle_font.name : "inherit"; // Check for inherit, then font name
		subtitle_el.style.fontSize = (state.subtitle_size != "custom" ? state.subtitle_size : state.subtitle_size_custom) + "rem";
		subtitle_el.style.lineHeight = state.subtitle_line_height;
		subtitle_el.style.fontWeight = state.subtitle_weight;
		subtitle_el.style.color = state.subtitle_color || state.font_color;
		subtitle_el.style.margin = 0;
		subtitle_el.style.paddingTop = !state.subtitle ? 0 : (state.subtitle_space_above == "custom" ? state.subtitle_space_above_custom : state.subtitle_space_above) + "rem";

		text_el.innerHTML = state.header_text ? state.header_text : "";
		text_el.style.fontSize = (state.header_text_size != "custom" ? state.header_text_size : state.header_text_size_custom) + "rem";
		text_el.style.lineHeight = state.header_text_line_height;
		text_el.style.fontWeight = state.header_text_weight;
		text_el.style.margin = 0;
		text_el.style.color = state.header_text_color || state.font_color;
		text_el.style.paddingTop = !state.header_text ? 0 : (state.header_text_space_above == "custom" ? state.header_text_space_above_custom : state.header_text_space_above) + "rem";

		logo_el.style.display = state.header_logo_enabled && isUrl(state.header_logo_src) ? "" : "none";
		logo_el.style.position = state.header_logo_align == "inside" ? "" : "fixed";
		logo_el.style.height = state.header_logo_height + "rem";
		logo_el.style.top = state.header_logo_align == "outside" ? 0 : "";
		logo_el.style.left = state.header_logo_align == "outside" && state.header_logo_position_outside == "left" ? 0 : "";
		logo_el.style.right = state.header_logo_align == "outside" && state.header_logo_position_outside == "right" ? 0 : "";
		logo_el.style.marginTop = state.header_logo_margin_top + "rem";
		logo_el.style.marginBottom = state.header_logo_margin_bottom + "rem";
		logo_el.style.marginLeft = state.header_logo_margin_left + "rem";
		logo_el.style.marginRight = state.header_logo_margin_right + "rem";
		logo_el.style.float = state.header_logo_position_inside == "top" || state.header_logo_align == "outside" ? "" : state.header_logo_position_inside;
		logo_el.style.width = "auto";
		logo_el.src = isUrl(state.header_logo_src) ? state.header_logo_src : "";
	}

	var footer_el, text_el$1, logo_el$1, logo_link;
	var has_footer = false;

	function appendStyles() {
		var css = document.createElement("style");
		css.type = "text/css";
		css.innerHTML = ".flourish-footer { margin: 0; } .flourish-footer p { margin: 0; display: inline; } .flourish-footer p:empty { height: 0; } .flourish-footer a { color: inherit; }";
		document.head.appendChild(css);
	}

	function addHttp(url) {
		if (url.indexOf("http://") !== 0 && url.indexOf("https://") !== 0) return "http://" + url;
		else return url;
	}


	function init$1() {
		appendStyles();

		footer_el = document.createElement("footer");
		footer_el.className = "flourish-footer";

		text_el$1 = document.createElement("div");
		text_el$1.className = "flourish-footer-text";

		logo_link = document.createElement("a");
		logo_link.target = "_blank";
		logo_el$1 = document.createElement("img");
		logo_el$1.className = "flourish-footer-logo";
		logo_link.appendChild(logo_el$1);

		footer_el.appendChild(text_el$1);
		footer_el.appendChild(logo_link);

		return footer_el;
	}

	function isPale(c) {
		// Should we add this to pocketknife? It's also used in LBP.
		if (!c) {
			console.warn("No valid color", c);
			return;
		}
		var rgb = color(c);
		// https://stackoverflow.com/questions/11867545/change-text-color-based-on-brightness-of-the-covered-background-area
		// With adjusted threshold
		return Math.round((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114))/1000 > 195;
	}

	function darkBackground() {
		return state.background_color_enabled && !isPale(state.background_color);
	}

	function getFooterLogoSrc() {
		var src = isUrl(state.footer_logo_src) ? state.footer_logo_src : "";

		if (isUrl(state.footer_logo_src_light) && darkBackground()) {
			src = state.footer_logo_src_light;
		}

		return src;
	}

	function hasFooterLogo() {
		return state.footer_logo_enabled && getFooterLogoSrc();
	}

	function update$1() {
		var sources = [
			{ name: state.source_name, url: state.source_url },
			{ name: state.multiple_sources ? state.source_name_2 : "", url: state.multiple_sources ? state.source_url_2 : "" },
			{ name: state.multiple_sources ? state.source_name_3 : "", url: state.multiple_sources ? state.source_url_3 : "" }
		].filter(function(source) {
			return source.name || source.url;
		});

		has_footer = sources.length > 0 || state.footer_note || state.footer_note_secondary || hasFooterLogo();

		footer_el.style.display = "flex";
		footer_el.style.height = has_footer ? null : 0;
		footer_el.style.width = "100%";
		footer_el.style.paddingTop = state.footer_border == "top" ? state.footer_border_space + "rem" : "";
		footer_el.style.paddingBottom = state.footer_border == "bottom" ? state.footer_border_space + "rem" : "";
		footer_el.style.borderTop = state.footer_border == "top" ? state.footer_border_width + "px " + state.footer_border_style + " " + state.footer_border_color : "";
		footer_el.style.borderBottom = state.footer_border == "bottom" ? state.footer_border_width + "px " + state.footer_border_style + " " + state.footer_border_color : "";
		footer_el.style.fontFamily = state.footer_font ? state.footer_font.name : "inherit"; // Check for inherit, then font name

		if (state.footer_align == "justify") footer_el.style.justifyContent = "space-between";
		else if (state.footer_align == "left") footer_el.style.justifyContent = "flex-start";
		else if (state.footer_align == "right") footer_el.style.justifyContent = "flex-end";
		else if (state.footer_align == "center") footer_el.style.justifyContent = "center";

		footer_el.style.fontSize = state.footer_text_size + "rem";
		footer_el.style.color = state.footer_text_color || state.font_color;
		footer_el.style.alignItems = state.footer_align_vertical;

		var source_container = document.createElement("span");
		sources.forEach(function(source, i) {
			var link_container = document.createElement("p");
			if (i > 0) link_container.innerText = ", ";
			if (source.url) {
				var link_el = document.createElement("a");
				link_el.innerText = source.name || source.url;
				link_el.href = addHttp(source.url);
				link_el.target = "_blank";
				link_container.appendChild(link_el);
			}
			else {
				link_container.innerText += source.name || source.url;
			}

			source_container.innerHTML += link_container.innerHTML;
		});

		text_el$1.style.order = state.footer_logo_order == "left" ? 2 : "";
		text_el$1.style.textAlign = state.footer_align == "justify" ? "" : state.footer_align;

		var text_el_html = "<p>";
		text_el_html += source_container.innerHTML !== "" ? state.source_label + " " + source_container.innerHTML : "";
		text_el_html += state.footer_note ? (source_container.innerHTML !== "" ? " • " : "") + state.footer_note : "";
		text_el_html += "</p>";
		text_el_html += state.footer_note_secondary ? "<br /><p>" + state.footer_note_secondary + "</p>" : "";

		text_el$1.innerHTML = text_el_html;

		logo_el$1.src = getFooterLogoSrc();
		logo_el$1.style.height = state.footer_logo_height + "rem";
		logo_el$1.style.marginLeft = state.footer_logo_order == "right" ? state.footer_logo_margin + "rem" : "";
		logo_el$1.style.marginRight = state.footer_logo_order == "left" ? state.footer_logo_margin + "rem" : "";
		logo_el$1.style.verticalAlign = state.footer_align_vertical;
		logo_el$1.style.display = hasFooterLogo() ? "" : "none";

		logo_link.href = state.footer_logo_link_url == "" ? "" : addHttp(state.footer_logo_link_url);
		logo_link.style.cursor = (state.footer_logo_link_url == "") ? "default" : "pointer";
	}

	function update$2(init) {
		if (!init) updateFontStyles(); // Don't load fonts before we get visualisation state (issue #139)
		update();
		update$1();
		updateBackground();
		var style = elements.wrapper.style;
		style.height = "100vh"; // reset to take up page height
		style.color = state.font_color;
		style.maxWidth = state.max_width_target == "wrapper" ? state.max_width + "px" : "";
		style.marginLeft = state.max_width_target == "wrapper" && state.max_width_align != "left" ? "auto" : "";
		style.marginRight = state.max_width_target == "wrapper" && state.max_width_align != "right" ? "auto" : "";
		style.padding = state.margin_top + "rem " + state.margin_right + "rem " + state.margin_bottom + "rem " + state.margin_left + "rem";
		style.borderTop = state.border.enabled ? state.border.top.width + "px " + state.border.top.style + " " + state.border.top.color : "";
		style.borderRight = state.border.enabled ? state.border.right.width + "px " + state.border.right.style + " " + state.border.right.color : "";
		style.borderBottom = state.border.enabled ? state.border.bottom.width + "px " + state.border.bottom.style + " " + state.border.bottom.color : "";
		style.borderLeft = state.border.enabled ? state.border.left.width + "px " + state.border.left.style + " " + state.border.left.color : "";

		var p_style = elements.primary.outer.style;
		var l_style = elements.legend.outer.style;
		var pos = parseFloat(p_style.order) > parseFloat(l_style.order) ? "above" : "below";

		LAYOUTS[state.layout_order].forEach(function(el, i) { elements[el].outer.style.order = 10 * i; });

		p_style.flex = "1 1 auto";
		p_style.height = null;
		setLegendPosition(pos);

		l_style.textAlign = state.header_align;
		elements.controls.outer.style.textAlign = state.header_align;

		elements.primary.outer.style.maxWidth = state.max_width_target == "primary" ? state.max_width + "px" : "";
		elements.primary.outer.style.marginLeft = state.max_width_target == "primary" && state.max_width_align != "left" ? "auto" : "";
		elements.primary.outer.style.marginRight = state.max_width_target == "primary" && state.max_width_align != "right" ? "auto" : "";

		var use_screenreader_text = state.screenreader_hide_primary && state.screenreader_text_primary != "";
		var description_node = document.getElementById("fl-layout-primary-description");
		description_node.innerText = state.screenreader_hide_primary ? state.screenreader_text_primary : "";
		use_screenreader_text ? elements.primary.outer.setAttribute("aria-describedBy", "fl-layout-primary-description") : elements.primary.outer.removeAttribute("aria-describedBy");
		state.screenreader_hide_primary ? elements.primary.inner.setAttribute("aria-hidden", true) : elements.primary.inner.removeAttribute("aria-hidden");


		var full_margin;
		if (state.space_between_sections == "custom") full_margin = state.space_between_sections_custom;
		else full_margin = state.space_between_sections;
		var margin_string = (full_margin / 2) + "rem";

		SECTIONS.map(function(el) {
			var containers = elements[el];
			var style = containers.outer.style;
			var inner = containers.inner;
			return { name: el, height: getHeight(inner), order: parseFloat(style.order), style: style };
		})
		.sort(function(a, b) {
			return a.order - b.order;
		})
		.filter(function(obj) {
			if (obj.height) return true;
			obj.style.paddingBottom = "";
			obj.style.paddingTop = "";
		})
		.forEach(function(obj, i, arr) {
			obj.style.paddingTop = i ? margin_string : "";
			obj.style.paddingBottom = (i < arr.length - 1) ? margin_string : "";
		});
	}

	function updateBackground() {
		document.body.style.backgroundColor = state.background_color_enabled ? state.background_color : "transparent";
		document.body.style.backgroundImage = state.background_image_enabled ? "url(" + state.background_image_src + ")" : "";
		document.body.style.backgroundSize = state.background_image_size;
		document.body.style.backgroundRepeat = "no-repeat";
		document.body.style.backgroundPosition = state.background_image_position;
	}

	var DEFAULTS = Object.freeze({
		body_font: {
			name: "Source Sans Pro",
			url: "https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700"
		},
		title_font: null,
		subtitle_font: null,
		footer_font: null,

		border: {
			enabled: false,
			top: {
				width: 1,
				color: "#dddddd",
				style: "solid"
			},
			right: {
				width: 1,
				color: "#dddddd",
				style: "solid"
			},
			bottom: {
				width: 1,
				color: "#dddddd",
				style: "solid"
			},
			left: {
				width: 1,
				color: "#dddddd",
				style: "solid"
			}
		},

		layout_order: "stack-default",

		margin_top: 0.75,
		margin_right: 0.75,
		margin_bottom: 0.75,
		margin_left: 0.75,

		space_between_sections: 1,
		space_between_sections_custom: 1,

		background_color_enabled: true,
		background_color: "#ffffff",
		background_image_enabled: false,
		background_image_src: "",
		background_image_size: "cover",
		background_image_position: "center center",

		max_width: 600,
		max_width_target: "none",
		max_width_align: "center",

		breakpoint_mobile_small: 0,
		breakpoint_mobile_big: 380,
		breakpoint_tablet: 580,
		breakpoint_desktop: 1080,
		breakpoint_big_screen: 1280,

		font_color: "#333333",
		font_size_mobile_small: 62.5,
		font_size_mobile_big: 75,
		font_size_tablet: 87.5,
		font_size_desktop: 100,
		font_size_big_screen: 120,

		// header
		header_align: "left",
		header_border: "none",
		header_border_width: 1,
		header_border_color: "#dddddd",
		header_border_style: "solid",
		header_border_space: 0.5,

		header_logo_enabled: false,
		header_logo_align: "inside",
		header_logo_src: "",
		header_logo_height: 3,
		header_logo_position_inside: "left",
		header_logo_position_outside: "left",
		header_logo_margin_top: 0.25,
		header_logo_margin_right: 0.5,
		header_logo_margin_bottom: 0,
		header_logo_margin_left: 0,

		title: "",
		title_size: 1.6,
		title_size_custom: 1.6,
		title_line_height: 1.2,
		title_color: null,
		title_weight: "bold",
		title_space_above: 0,
		title_space_above_custom: 1.5,
		title_styling: false,

		subtitle: "",
		subtitle_size: 1.6,
		subtitle_size_custom: 1.6,
		subtitle_line_height: 1.2,
		subtitle_color: null,
		subtitle_weight: "normal",
		subtitle_space_above: 0,
		subtitle_space_above_custom: 1.5,
		subtitle_styling: false,

		header_text: "",
		header_text_size: 1.2,
		header_text_size_custom: 1.2,
		header_text_line_height: 1.2,
		header_text_color: null,
		header_text_weight: "normal",
		header_text_space_above: 0.5,
		header_text_space_above_custom: 1.5,

		// footer
		source_label: "Source: ",
		source_name: "",
		source_url: "",
		source_name_2: "",
		source_url_2: "",
		source_name_3: "",
		source_url_3: "",

		footer_note: "",
		footer_note_secondary: "",
		footer_text_size: 1,
		footer_text_color: null,
		footer_styling: false,

		footer_align: "justify",
		footer_align_vertical: "center",
		footer_border: "none",
		footer_border_width: 1,
		footer_border_color: "#dddddd",
		footer_border_style: "solid",
		footer_border_space: 0.5,

		footer_logo_enabled: false,
		footer_logo_src: "",
		footer_logo_src_light: "",
		footer_logo_link_url: "",
		footer_logo_height: 1.5,
		footer_logo_margin: 0.25,
		footer_logo_order: "right",

		screenreader_hide_primary: true,
		screenreader_text_primary: ""
	});


	function getDefaultHeight() {
		if (Flourish.fixed_height) return window.innerHeight;
		var width = window.innerWidth;
		if (width > 999) return 650;
		if (width > 599) return 575;
		return 400;
	}


	var DEFAULT_OVERLAY_MESSAGE = "Your web browser does not support the features used by this content. Consider updating to a modern browser.";

	var window_width, base_size;

	function remToPx(rem) {
		if (window.innerWidth !== window_width) {
			window_width = window.innerWidth;
			base_size = parseFloat(getComputedStyle(document.documentElement).fontSize);
		}
		return rem * base_size;
	}

	// Globals ------------------------------------------------------
	var state;
	var SECTIONS = ["header", "controls", "legend", "primary", "footer"];
	var overlay;
	var elements = {};


	// Helper functions ------------------
	function getWidth(node) {
		return node.getBoundingClientRect().width;
	}

	function getHeight(node) {
		return node.getBoundingClientRect().height;
	}

	function createWrapper() {
		var outer_wrapper = document.createElement("div");
		outer_wrapper.id = "fl-layout-wrapper-outer";
		outer_wrapper.style.display = "flex";

		var wrapper = document.createElement("main");
		wrapper.id = "fl-layout-wrapper";
		wrapper.style.display = "flex";
		wrapper.style.flexGrow = "1";
		wrapper.style.flexDirection = "column";
		wrapper.style.boxSizing = "border-box";
		// This will make sure the wrapper won't grow in width when
		// there are child elements that exceed the width
		wrapper.style.overflow = "hidden";

		var aside = document.createElement("aside");
		aside.id = "fl-layout-sidebar";
		aside.style.position = "relative";

		elements.sidebar = aside;

		outer_wrapper.appendChild(wrapper);
		outer_wrapper.appendChild(aside);

		document.body.appendChild(outer_wrapper);

		return wrapper;
	}

	function addElement(name, i) {
		var id = "fl-layout-" + name;

		var outer_el = document.createElement("section");
		outer_el.className = "fl-layout-container";
		outer_el.id = id + "-container";
		outer_el.style.width = "100%";
		outer_el.style.position = "relative";
		outer_el.style.order = i;

		var inner_el = document.createElement("div");
		inner_el.className = "fl-layout-inner";
		inner_el.id = id;
		inner_el.style.width = "100%";

		// This was added in a later version so that absolute elements in the
		// primary container align with the edge of the inner primary container.
		// We've found one issue with this in the arc map, that is documented
		// in issue 72 of this repository
		inner_el.style.position = "relative";

		// The height of the outer primary container is decided by flexbox
		// and depends on the remaining available vertical space. As such
		// there is no explicity height set to this container (like a % or px)
		// Safari gets confused by this and any child elements (the primary inner
		// in this case) with an height of 100% will be calculated as "height: auto"
		// Setting the primary outer to "display: flex" will cause the child element
		// to stretch out over the available space. Solution found here:
		// https://stackoverflow.com/a/33644245
		if (name == "primary") {
			outer_el.style.display = "flex";
			getScreenreaderText(outer_el);
		}

		if (name == "controls" || name == "legend") {
			inner_el.setAttribute("aria-hidden", true);
		}

		outer_el.appendChild(inner_el);
		elements.wrapper.appendChild(outer_el);

		return {
			outer: outer_el,
			inner: inner_el
		};
	}

	function getScreenreaderText(container) {
		var el = document.createElement("p");
		el.id = "fl-layout-primary-description";
		var style = el.style;
		style.border = "0";
		style.height = "1px";
		style.width = "1px";
		style.margin = "-1px";
		style.overflow = "hidden";
		style.padding = "0";
		style.position = "absolute";
		style.clip = "rect(0 0 0 0)";
		container.appendChild(el);
		return el;
	}

	function createOverlay() {
		var primary = elements.primary.outer;
		primary.style.position = "relative";
		overlay = document.createElement("div");
		overlay.id = "fl-layout-overlay";
		var style = overlay.style;
		style.position = "absolute";
		style.display = "none";
		style.width = "100%";
		style.height = "100%";
		style.top = 0;
		style.left = 0;
		style.backgroundColor = "rgb(200,200,200)";
		style.zIndex = 999999;
		style.pointerEvents = "none";
		var p = document.createElement("p");
		p.className = "fl-layout-overlay-message";
		style = p.style;
		style.color = "#333333";
		style.fontSize = "1.5rem";
		style.paddingLeft = "15%";
		style.paddingRight = "15%";
		style.width = "100%";
		style.boxSizing = "border-box";
		style.position = "absolute";
		style.top = "50%";
		style.transform = "translate(0, -50%)";
		style.margin = "0";
		style.textAlign = "center";
		overlay.appendChild(p);
		primary.appendChild(overlay);
		return overlay;
	}


	// Functions returned by init ------------------
	function getWrapper() {
		return elements.wrapper;
	}

	function getSidebar() {
		return elements.sidebar;
	}

	function getSection(section) {
		return SECTIONS.indexOf(section) !== -1 ? elements[section].inner : null;
	}

	function getOuterWidth(el) {
		if (!elements[el] && el !== undefined) return null;
		return (el == "wrapper" || el === undefined) ? getWidth(elements.wrapper) : getWidth(elements[el].outer);
	}

	function getInnerWidth(el) {
		if (!elements[el] && el !== undefined) return null;
		return (el == "wrapper" || el === undefined) ? getWidth(elements.wrapper) - getMargin("horizontal") - getBorderWidth("horizontal") : getWidth(elements[el].inner);
	}

	function getOuterHeight(el) {
		if (!elements[el] && el !== undefined) return null;
		return (el == "wrapper" || el === undefined) ? getHeight(elements.wrapper) : getHeight(elements[el].outer);
	}

	function getInnerHeight(el) {
		if (!elements[el] && el !== undefined) return null;
		return (el == "wrapper" || el === undefined) ? getHeight(elements.wrapper) - getMargin("vertical") - getBorderWidth("vertical") : getHeight(elements[el].inner);
	}

	function getPrimaryHeight() {
		return getHeight(elements.primary.outer) - getVerticalPadding(elements.primary.outer);
	}

	function getPrimaryWidth() {
		return getWidth(elements.primary.inner);
	}

	function getVerticalPadding(node) {
		var primary_padding_top = parseFloat(getComputedStyle(node).paddingTop) || 0;
		var primary_padding_bottom = parseFloat(getComputedStyle(node).paddingBottom) || 0;
		return primary_padding_top + primary_padding_bottom;
	}

	function getDefaultPrimaryHeight() {
		var default_inner_height = getDefaultHeight() - getMargin("vertical") - getBorderWidth("vertical");
		var others = ["header", "controls", "legend", "footer"];
		var other_height = others.reduce(function(sum, el) { return sum += getOuterHeight(el); }, 0);

		return default_inner_height - other_height - getVerticalPadding(elements.primary.outer);
	}

	function getMargin(side) {
		var margin;

		if (side == "left") margin = state.margin_left;
		else if (side == "right") margin = state.margin_right;
		else if (side == "top") margin = state.margin_top;
		else if (side == "bottom") margin = state.margin_bottom;
		else if (side == "horizontal") margin = state.margin_left + state.margin_right;
		else if (side == "vertical") margin = state.margin_top + state.margin_bottom;

		return remToPx(margin);
	}

	function getBorderWidth(space) {
		if (!state.border.enabled) return 0;
		if (space == "vertical") return state.border.top.width + state.border.bottom.width;
		if (space == "horizontal") return state.border.left.width + state.border.right.width;
		return null;
	}

	function setHeight(primary_height) {
		var primary = elements.primary;
		if (Flourish.fixed_height || Flourish.fixed_height === undefined) {
			primary.inner.style.height = "";
			return;
		}

		var is_null = primary_height === null;
		var p_height = is_null ? getDefaultPrimaryHeight() : primary_height;

		if (p_height + getVerticalPadding(elements.primary.outer) === parseFloat(primary.outer.style.height)) return;
		elements.wrapper.style.height = "";

		primary.outer.style.flex = "";
		primary.inner.style.height = p_height + "px";
		Flourish.setHeight(is_null ? null : getOuterHeight());
	}

	function setLegendPosition(pos) {
		var p_order = parseFloat(elements.primary.outer.style.order);
		elements.legend.outer.style.order = p_order + 1 * (pos.trim().toLowerCase() === "below" ? 1 : -1);
	}

	function showOverlay(show_overlay) {
		var p = overlay.querySelector(".fl-layout-overlay-message");
		if (show_overlay) {
			overlay.style.display = "block";
			var message = typeof show_overlay === "string" ? show_overlay : DEFAULT_OVERLAY_MESSAGE;
			p.innerHTML = message;
		}
		else {
			p.textContent = "";
			overlay.style.display = "none";
		}
	}

	function getOverlay() {
		return overlay;
	}


	// Main init function ----------------------------------------
	function init$2(state_) {
		state = state_;
		for (var key in DEFAULTS) {	if (state[key] === undefined) state[key] = DEFAULTS[key]; }

		initFontStyles();
		elements.wrapper = createWrapper();
		SECTIONS.forEach(function(section, i) { elements[section] = addElement(section, i); });
		getSection("header").appendChild(init());
		getSection("footer").appendChild(init$1());
		elements.primary.outer.style.overflow = "hidden";
		createOverlay();

		update$2(true);

		return {
			update: update$2,
			getWrapper: getWrapper,
			getSidebar: getSidebar,
			getSection: getSection,
			getOuterWidth: getOuterWidth,
			getInnerWidth: getInnerWidth,
			getOuterHeight: getOuterHeight,
			getInnerHeight: getInnerHeight,
			getPrimaryHeight: getPrimaryHeight,
			getPrimaryWidth: getPrimaryWidth,
			getDefaultPrimaryHeight: getDefaultPrimaryHeight,
			setHeight: setHeight,
			setLegendPosition: setLegendPosition,
			showOverlay: showOverlay,
			remToPx: remToPx,
			getOverlay: getOverlay
		};
	}

	return init$2;

})));
