
import { update } from "./update";
import { DEFAULTS, getDefaultHeight, DEFAULT_OVERLAY_MESSAGE } from "../defaults";
import { initFontStyles } from "../lib/font-styles";
import { init as initHeader } from "../lib/header.js";
import { init as initFooter } from "../lib/footer.js";
import { remToPx } from "../lib/rem-to-px";


// Globals ------------------------------------------------------
var state;
var SECTIONS = ["header", "controls", "legend", "primary", "footer"];
var overlay;
var elements = {};


// Helper functions ------------------
function getWidth(node) {
	return node.getBoundingClientRect().width;
}

function getHeight(node) {
	return node.getBoundingClientRect().height;
}

function createWrapper() {
	var outer_wrapper = document.createElement("div");
	outer_wrapper.id = "fl-layout-wrapper-outer";
	outer_wrapper.style.display = "flex";

	var wrapper = document.createElement("main");
	wrapper.id = "fl-layout-wrapper";
	wrapper.style.display = "flex";
	wrapper.style.flexGrow = "1";
	wrapper.style.flexDirection = "column";
	wrapper.style.boxSizing = "border-box";
	// This will make sure the wrapper won't grow in width when
	// there are child elements that exceed the width
	wrapper.style.overflow = "hidden";

	var aside = document.createElement("aside");
	aside.id = "fl-layout-sidebar";
	aside.style.position = "relative";

	elements.sidebar = aside;

	outer_wrapper.appendChild(wrapper);
	outer_wrapper.appendChild(aside);

	document.body.appendChild(outer_wrapper);

	return wrapper;
}

function addElement(name, i) {
	var id = "fl-layout-" + name;

	var outer_el = document.createElement("section");
	outer_el.className = "fl-layout-container";
	outer_el.id = id + "-container";
	outer_el.style.width = "100%";
	outer_el.style.position = "relative";
	outer_el.style.order = i;

	var inner_el = document.createElement("div");
	inner_el.className = "fl-layout-inner";
	inner_el.id = id;
	inner_el.style.width = "100%";

	// This was added in a later version so that absolute elements in the
	// primary container align with the edge of the inner primary container.
	// We've found one issue with this in the arc map, that is documented
	// in issue 72 of this repository
	inner_el.style.position = "relative";

	// The height of the outer primary container is decided by flexbox
	// and depends on the remaining available vertical space. As such
	// there is no explicity height set to this container (like a % or px)
	// Safari gets confused by this and any child elements (the primary inner
	// in this case) with an height of 100% will be calculated as "height: auto"
	// Setting the primary outer to "display: flex" will cause the child element
	// to stretch out over the available space. Solution found here:
	// https://stackoverflow.com/a/33644245
	if (name == "primary") {
		outer_el.style.display = "flex";
		getScreenreaderText(outer_el);
	}

	if (name == "controls" || name == "legend") {
		inner_el.setAttribute("aria-hidden", true);
	}

	outer_el.appendChild(inner_el);
	elements.wrapper.appendChild(outer_el);

	return {
		outer: outer_el,
		inner: inner_el
	};
}

function getScreenreaderText(container) {
	var el = document.createElement("p");
	el.id = "fl-layout-primary-description";
	var style = el.style;
	style.border = "0";
	style.height = "1px";
	style.width = "1px";
	style.margin = "-1px";
	style.overflow = "hidden";
	style.padding = "0";
	style.position = "absolute";
	style.clip = "rect(0 0 0 0)";
	container.appendChild(el);
	return el;
}

function createOverlay() {
	var primary = elements.primary.outer;
	primary.style.position = "relative";
	overlay = document.createElement("div");
	overlay.id = "fl-layout-overlay";
	var style = overlay.style;
	style.position = "absolute";
	style.display = "none";
	style.width = "100%";
	style.height = "100%";
	style.top = 0;
	style.left = 0;
	style.backgroundColor = "rgb(200,200,200)";
	style.zIndex = 999999;
	style.pointerEvents = "none";
	var p = document.createElement("p");
	p.className = "fl-layout-overlay-message";
	style = p.style;
	style.color = "#333333";
	style.fontSize = "1.5rem";
	style.paddingLeft = "15%";
	style.paddingRight = "15%";
	style.width = "100%";
	style.boxSizing = "border-box";
	style.position = "absolute";
	style.top = "50%";
	style.transform = "translate(0, -50%)";
	style.margin = "0";
	style.textAlign = "center";
	overlay.appendChild(p);
	primary.appendChild(overlay);
	return overlay;
}


// Functions returned by init ------------------
function getWrapper() {
	return elements.wrapper;
}

function getSidebar() {
	return elements.sidebar;
}

function getSection(section) {
	return SECTIONS.indexOf(section) !== -1 ? elements[section].inner : null;
}

function getOuterWidth(el) {
	if (!elements[el] && el !== undefined) return null;
	return (el == "wrapper" || el === undefined) ? getWidth(elements.wrapper) : getWidth(elements[el].outer);
}

function getInnerWidth(el) {
	if (!elements[el] && el !== undefined) return null;
	return (el == "wrapper" || el === undefined) ? getWidth(elements.wrapper) - getMargin("horizontal") - getBorderWidth("horizontal") : getWidth(elements[el].inner);
}

function getOuterHeight(el) {
	if (!elements[el] && el !== undefined) return null;
	return (el == "wrapper" || el === undefined) ? getHeight(elements.wrapper) : getHeight(elements[el].outer);
}

function getInnerHeight(el) {
	if (!elements[el] && el !== undefined) return null;
	return (el == "wrapper" || el === undefined) ? getHeight(elements.wrapper) - getMargin("vertical") - getBorderWidth("vertical") : getHeight(elements[el].inner);
}

function getPrimaryHeight() {
	return getHeight(elements.primary.outer) - getVerticalPadding(elements.primary.outer);
}

function getPrimaryWidth() {
	return getWidth(elements.primary.inner);
}

function getVerticalPadding(node) {
	var primary_padding_top = parseFloat(getComputedStyle(node).paddingTop) || 0;
	var primary_padding_bottom = parseFloat(getComputedStyle(node).paddingBottom) || 0;
	return primary_padding_top + primary_padding_bottom;
}

function getDefaultPrimaryHeight() {
	var default_inner_height = getDefaultHeight() - getMargin("vertical") - getBorderWidth("vertical");
	var others = ["header", "controls", "legend", "footer"];
	var other_height = others.reduce(function(sum, el) { return sum += getOuterHeight(el); }, 0);

	return default_inner_height - other_height - getVerticalPadding(elements.primary.outer);
}

function getMargin(side) {
	var margin;

	if (side == "left") margin = state.margin_left;
	else if (side == "right") margin = state.margin_right;
	else if (side == "top") margin = state.margin_top;
	else if (side == "bottom") margin = state.margin_bottom;
	else if (side == "horizontal") margin = state.margin_left + state.margin_right;
	else if (side == "vertical") margin = state.margin_top + state.margin_bottom;

	return remToPx(margin);
}

function getBorderWidth(space) {
	if (!state.border.enabled) return 0;
	if (space == "vertical") return state.border.top.width + state.border.bottom.width;
	if (space == "horizontal") return state.border.left.width + state.border.right.width;
	return null;
}

function setHeight(primary_height) {
	var primary = elements.primary;
	if (Flourish.fixed_height || Flourish.fixed_height === undefined) {
		primary.inner.style.height = "";
		return;
	}

	var is_null = primary_height === null;
	var p_height = is_null ? getDefaultPrimaryHeight() : primary_height;

	if (p_height + getVerticalPadding(elements.primary.outer) === parseFloat(primary.outer.style.height)) return;
	elements.wrapper.style.height = "";

	primary.outer.style.flex = "";
	primary.inner.style.height = p_height + "px";
	Flourish.setHeight(is_null ? null : getOuterHeight());
}

function setLegendPosition(pos) {
	var p_order = parseFloat(elements.primary.outer.style.order);
	elements.legend.outer.style.order = p_order + 1 * (pos.trim().toLowerCase() === "below" ? 1 : -1);
}

function showOverlay(show_overlay) {
	var p = overlay.querySelector(".fl-layout-overlay-message");
	if (show_overlay) {
		overlay.style.display = "block";
		var message = typeof show_overlay === "string" ? show_overlay : DEFAULT_OVERLAY_MESSAGE;
		p.innerHTML = message;
	}
	else {
		p.textContent = "";
		overlay.style.display = "none";
	}
}

function getOverlay() {
	return overlay;
}


// Main init function ----------------------------------------
function init(state_) {
	state = state_;
	for (var key in DEFAULTS) {	if (state[key] === undefined) state[key] = DEFAULTS[key]; }

	initFontStyles();
	elements.wrapper = createWrapper();
	SECTIONS.forEach(function(section, i) { elements[section] = addElement(section, i); });
	getSection("header").appendChild(initHeader());
	getSection("footer").appendChild(initFooter());
	elements.primary.outer.style.overflow = "hidden";
	createOverlay();

	update(true);

	return {
		update: update,
		getWrapper: getWrapper,
		getSidebar: getSidebar,
		getSection: getSection,
		getOuterWidth: getOuterWidth,
		getInnerWidth: getInnerWidth,
		getOuterHeight: getOuterHeight,
		getInnerHeight: getInnerHeight,
		getPrimaryHeight: getPrimaryHeight,
		getPrimaryWidth: getPrimaryWidth,
		getDefaultPrimaryHeight: getDefaultPrimaryHeight,
		setHeight: setHeight,
		setLegendPosition: setLegendPosition,
		showOverlay: showOverlay,
		remToPx: remToPx,
		getOverlay: getOverlay
	};
}


export { init, state, elements, setLegendPosition, getHeight, remToPx, SECTIONS };
