import { state, elements, setLegendPosition, getHeight, SECTIONS } from "./init";
import { updateFontStyles } from "../lib/font-styles";
import { LAYOUTS } from "../lib/layouts.js";
import { update as updateHeader } from "../lib/header.js";
import { update as updateFooter } from "../lib/footer.js";


function update(init) {
	if (!init) updateFontStyles(); // Don't load fonts before we get visualisation state (issue #139)
	updateHeader();
	updateFooter();
	updateBackground();
	var style = elements.wrapper.style;
	style.height = "100vh"; // reset to take up page height
	style.color = state.font_color;
	style.maxWidth = state.max_width_target == "wrapper" ? state.max_width + "px" : "";
	style.marginLeft = state.max_width_target == "wrapper" && state.max_width_align != "left" ? "auto" : "";
	style.marginRight = state.max_width_target == "wrapper" && state.max_width_align != "right" ? "auto" : "";
	style.padding = state.margin_top + "rem " + state.margin_right + "rem " + state.margin_bottom + "rem " + state.margin_left + "rem";
	style.borderTop = state.border.enabled ? state.border.top.width + "px " + state.border.top.style + " " + state.border.top.color : "";
	style.borderRight = state.border.enabled ? state.border.right.width + "px " + state.border.right.style + " " + state.border.right.color : "";
	style.borderBottom = state.border.enabled ? state.border.bottom.width + "px " + state.border.bottom.style + " " + state.border.bottom.color : "";
	style.borderLeft = state.border.enabled ? state.border.left.width + "px " + state.border.left.style + " " + state.border.left.color : "";

	var p_style = elements.primary.outer.style;
	var l_style = elements.legend.outer.style;
	var pos = parseFloat(p_style.order) > parseFloat(l_style.order) ? "above" : "below";

	LAYOUTS[state.layout_order].forEach(function(el, i) { elements[el].outer.style.order = 10 * i; });

	p_style.flex = "1 1 auto";
	p_style.height = null;
	setLegendPosition(pos);

	l_style.textAlign = state.header_align;
	elements.controls.outer.style.textAlign = state.header_align;

	elements.primary.outer.style.maxWidth = state.max_width_target == "primary" ? state.max_width + "px" : "";
	elements.primary.outer.style.marginLeft = state.max_width_target == "primary" && state.max_width_align != "left" ? "auto" : "";
	elements.primary.outer.style.marginRight = state.max_width_target == "primary" && state.max_width_align != "right" ? "auto" : "";

	var use_screenreader_text = state.screenreader_hide_primary && state.screenreader_text_primary != "";
	var description_node = document.getElementById("fl-layout-primary-description");
	description_node.innerText = state.screenreader_hide_primary ? state.screenreader_text_primary : "";
	use_screenreader_text ? elements.primary.outer.setAttribute("aria-describedBy", "fl-layout-primary-description") : elements.primary.outer.removeAttribute("aria-describedBy");
	state.screenreader_hide_primary ? elements.primary.inner.setAttribute("aria-hidden", true) : elements.primary.inner.removeAttribute("aria-hidden");


	var full_margin;
	if (state.space_between_sections == "custom") full_margin = state.space_between_sections_custom;
	else full_margin = state.space_between_sections;
	var margin_string = (full_margin / 2) + "rem";

	SECTIONS.map(function(el) {
		var containers = elements[el];
		var style = containers.outer.style;
		var inner = containers.inner;
		return { name: el, height: getHeight(inner), order: parseFloat(style.order), style: style };
	})
	.sort(function(a, b) {
		return a.order - b.order;
	})
	.filter(function(obj) {
		if (obj.height) return true;
		obj.style.paddingBottom = "";
		obj.style.paddingTop = "";
	})
	.forEach(function(obj, i, arr) {
		obj.style.paddingTop = i ? margin_string : "";
		obj.style.paddingBottom = (i < arr.length - 1) ? margin_string : "";
	});
}

function updateBackground() {
	document.body.style.backgroundColor = state.background_color_enabled ? state.background_color : "transparent";
	document.body.style.backgroundImage = state.background_image_enabled ? "url(" + state.background_image_src + ")" : "";
	document.body.style.backgroundSize = state.background_image_size;
	document.body.style.backgroundRepeat = "no-repeat";
	document.body.style.backgroundPosition = state.background_image_position;
}


export { update };
