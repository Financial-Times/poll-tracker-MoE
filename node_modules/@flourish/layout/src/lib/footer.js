import { color } from "d3-color";
import { isUrl } from "@flourish/pocket-knife";
import { state } from "../core/init";

var footer_el, text_el, logo_el, logo_link;
var has_footer = false;

function appendStyles() {
	var css = document.createElement("style");
	css.type = "text/css";
	css.innerHTML = ".flourish-footer { margin: 0; } .flourish-footer p { margin: 0; display: inline; } .flourish-footer p:empty { height: 0; } .flourish-footer a { color: inherit; }";
	document.head.appendChild(css);
}

function addHttp(url) {
	if (url.indexOf("http://") !== 0 && url.indexOf("https://") !== 0) return "http://" + url;
	else return url;
}


function init() {
	appendStyles();

	footer_el = document.createElement("footer");
	footer_el.className = "flourish-footer";

	text_el = document.createElement("div");
	text_el.className = "flourish-footer-text";

	logo_link = document.createElement("a");
	logo_link.target = "_blank";
	logo_el = document.createElement("img");
	logo_el.className = "flourish-footer-logo";
	logo_link.appendChild(logo_el);

	footer_el.appendChild(text_el);
	footer_el.appendChild(logo_link);

	return footer_el;
}

function isPale(c) {
	// Should we add this to pocketknife? It's also used in LBP.
	if (!c) {
		console.warn("No valid color", c);
		return;
	}
	var rgb = color(c);
	// https://stackoverflow.com/questions/11867545/change-text-color-based-on-brightness-of-the-covered-background-area
	// With adjusted threshold
	return Math.round((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114))/1000 > 195;
}

function darkBackground() {
	return state.background_color_enabled && !isPale(state.background_color);
}

function getFooterLogoSrc() {
	var src = isUrl(state.footer_logo_src) ? state.footer_logo_src : "";

	if (isUrl(state.footer_logo_src_light) && darkBackground()) {
		src = state.footer_logo_src_light;
	}

	return src;
}

function hasFooterLogo() {
	return state.footer_logo_enabled && getFooterLogoSrc();
}

function update() {
	var sources = [
		{ name: state.source_name, url: state.source_url },
		{ name: state.multiple_sources ? state.source_name_2 : "", url: state.multiple_sources ? state.source_url_2 : "" },
		{ name: state.multiple_sources ? state.source_name_3 : "", url: state.multiple_sources ? state.source_url_3 : "" }
	].filter(function(source) {
		return source.name || source.url;
	});

	has_footer = sources.length > 0 || state.footer_note || state.footer_note_secondary || hasFooterLogo();

	footer_el.style.display = "flex";
	footer_el.style.height = has_footer ? null : 0;
	footer_el.style.width = "100%";
	footer_el.style.paddingTop = state.footer_border == "top" ? state.footer_border_space + "rem" : "";
	footer_el.style.paddingBottom = state.footer_border == "bottom" ? state.footer_border_space + "rem" : "";
	footer_el.style.borderTop = state.footer_border == "top" ? state.footer_border_width + "px " + state.footer_border_style + " " + state.footer_border_color : "";
	footer_el.style.borderBottom = state.footer_border == "bottom" ? state.footer_border_width + "px " + state.footer_border_style + " " + state.footer_border_color : "";
	footer_el.style.fontFamily = state.footer_font ? state.footer_font.name : "inherit"; // Check for inherit, then font name

	if (state.footer_align == "justify") footer_el.style.justifyContent = "space-between";
	else if (state.footer_align == "left") footer_el.style.justifyContent = "flex-start";
	else if (state.footer_align == "right") footer_el.style.justifyContent = "flex-end";
	else if (state.footer_align == "center") footer_el.style.justifyContent = "center";

	footer_el.style.fontSize = state.footer_text_size + "rem";
	footer_el.style.color = state.footer_text_color || state.font_color;
	footer_el.style.alignItems = state.footer_align_vertical;

	var source_container = document.createElement("span");
	sources.forEach(function(source, i) {
		var link_container = document.createElement("p");
		if (i > 0) link_container.innerText = ", ";
		if (source.url) {
			var link_el = document.createElement("a");
			link_el.innerText = source.name || source.url;
			link_el.href = addHttp(source.url);
			link_el.target = "_blank";
			link_container.appendChild(link_el);
		}
		else {
			link_container.innerText += source.name || source.url;
		}

		source_container.innerHTML += link_container.innerHTML;
	});

	text_el.style.order = state.footer_logo_order == "left" ? 2 : "";
	text_el.style.textAlign = state.footer_align == "justify" ? "" : state.footer_align;

	var text_el_html = "<p>";
	text_el_html += source_container.innerHTML !== "" ? state.source_label + " " + source_container.innerHTML : "";
	text_el_html += state.footer_note ? (source_container.innerHTML !== "" ? " â€¢ " : "") + state.footer_note : "";
	text_el_html += "</p>";
	text_el_html += state.footer_note_secondary ? "<br /><p>" + state.footer_note_secondary + "</p>" : "";

	text_el.innerHTML = text_el_html;

	logo_el.src = getFooterLogoSrc();
	logo_el.style.height = state.footer_logo_height + "rem";
	logo_el.style.marginLeft = state.footer_logo_order == "right" ? state.footer_logo_margin + "rem" : "";
	logo_el.style.marginRight = state.footer_logo_order == "left" ? state.footer_logo_margin + "rem" : "";
	logo_el.style.verticalAlign = state.footer_align_vertical;
	logo_el.style.display = hasFooterLogo() ? "" : "none";

	logo_link.href = state.footer_logo_link_url == "" ? "" : addHttp(state.footer_logo_link_url);
	logo_link.style.cursor = (state.footer_logo_link_url == "") ? "default" : "pointer";
}


export { init, update };
