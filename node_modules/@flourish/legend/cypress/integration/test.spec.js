/* eslint-disable no-undef */

// Add more tests for
// - Making sure labels in continuous legend are not cut off
// - Discrete setting filtering
// - Auto title bugs

describe("Legend should initialize", () => {
	const state = {
		legend_container: {},
		legend_categorical: {},
		legend_continuous: {},
		legend_size: {}
	};

	function createLegends(container, state) {
		cy.visit("cypress/fixtures/sdk.html");
		return cy.window().then(({ document, legend, d3 }) => {
			var legend_container = legend.createLegendContainer(state.legend_container);

			var legend_categorical = legend.createDiscreteColorLegend(state.legend_categorical);
			var legend_continuous = legend.createContinuousColorLegend(state.legend_continuous);
			var legend_size = legend.createContinuousSizeLegend(state.legend_size);

			legend_container
				.appendTo(document.querySelector(container))
				.add([
					legend_categorical,
					legend_continuous,
					legend_size
				]);

			legend_continuous.data([0, 1000], function() { return "red"; });
			legend_categorical.data(["A", "B", "C"], function () { return "red"; });

			var sizeScale = d3.scaleLinear().range([0, 20]).domain([0, 1]);
			legend_size.scale(sizeScale);

			legend_container.update();

			var legends = { legend_categorical, legend_continuous, legend_size, legend_container };

			cy.wrap(legends);
		});
	}

	function updateLegends(legends) {
		legends.legend_container.update();
	}

	it("Should load legends", () => {
		createLegends("#wrapper header", state).then(() => {
			cy.get("#fl-legend-continuous-size-0").should("exist");
			cy.get("#fl-legend-continuous-color-0").should("exist");
			cy.get("#fl-legend-discrete-color-0").should("exist");
		});
	});

	it("Should update font size", () => {
		createLegends("#wrapper header", state).then((legends) => {
			var rems = [ 0.5, 1, 4];
			var base = parseFloat(window.getComputedStyle(document.body).fontSize);

			cy.get(rems).each(font_size_rem => {
				cy.wait(100).then(function() {
					var font_size_px = font_size_rem * base;
					state.legend_container.text_size = font_size_rem;
					updateLegends(legends);

					cy.get(".label")
						.should($el => {
							expect($el.css("font-size"))
								.eq(font_size_px + "px");
						});
					cy.get(".fl-legend-label")
						.should($el => {
							expect($el.css("font-size"))
								.eq(font_size_px + "px");
						});
				});
			});
		});
	});

	it("Should center align swatches next to label", () => {
		createLegends("#wrapper header", state, ["discrete"]).then((legends) => {
			var font_sizes = [0.5, 1, 4];
			var swatch_sizes = [0.25, 1, 10];

			cy.get(font_sizes).each(font_size => {
				cy.get(swatch_sizes).each(swatch_size => {
					cy.wait(1).then(function () {
						state.legend_container.text_size = font_size;
						state.legend_categorical.swatch_height = swatch_size;
						updateLegends(legends);

						cy.get(".fl-legend-label")
							.then($label => {
								var label_height = $label.outerHeight();
								var label_offset = $label.position().top;
								var label_center = label_offset + label_height * 0.5;
								cy.get(".fl-legend-swatch")
									.then($swatch => {
										var swatch_height = $swatch.outerHeight();
										var swatch_offset = $swatch.position().top;
										var swatch_center = swatch_offset + swatch_height * 0.5;
										cy.expect(swatch_center == label_center).eq(true);
									});
							});
					});
				});
			});
		});
	});

	it("Should show continuous size and color labels at same top offset", () => {
		createLegends("#wrapper header", state, ["discrete"]).then((legends) => {
			var font_sizes = [0.5, 1, 4];
			var swatch_sizes = [0.25, 1, 10];
			var circle_sizes = [0.25, 1, 10];

			cy.get(font_sizes).each(font_size => {
				cy.get(swatch_sizes).each(swatch_size => {
					cy.get(circle_sizes).each(circle_size => {
						cy.wait(100).then(function () {
							state.legend_container.text_size = font_size;
							state.legend_categorical.swatch_height = swatch_size;
							state.legend_size.clip_height = circle_size;
							updateLegends(legends);

							cy.get("#fl-legend-continuous-color-0 .max.label")
								.then($color_label => {
									var continuous_color_label_height = $color_label.outerHeight();
									var continuous_color_label_offset = $color_label.position().top;
									var continuous_color_label_center = continuous_color_label_offset + continuous_color_label_height * 0.5;
									cy.get("#fl-legend-continuous-size-0 .max.label")
										.then($size_label => {
											var size_label_height = $size_label.outerHeight();
											var size_label_offset = $size_label.position().top;
											var size_label_center = size_label_offset + size_label_height * 0.5;
											cy.get(".fl-legend-label")
												.then($discrete_color_label => {
													var discrete_color_label_height = $discrete_color_label.outerHeight();
													var discrete_color_label_offset = $discrete_color_label.position().top;
													var discrete_color_label_center = discrete_color_label_offset + discrete_color_label_height * 0.5;
													cy.expect(size_label_center == discrete_color_label_center && size_label_center == continuous_color_label_center).eq(true);
												});
										});
								});
						});
					});
				});
			});
		});
	});
});
