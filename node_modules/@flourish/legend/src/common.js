import { ascending } from "d3-array";
import Stylesheet from "@flourish/js2css";

var small_gap = "0.2em";

function appendTo(container) {
	container.appendChild(this._container.node());

	if (!document.querySelector("#legend-styles")) {
		var css = document.createElement("style");
		var styles = new Stylesheet();

		styles.select(".fl-legend-container.interactive .fl-legend-item:hover")
			.style("opacity", 0.75)
			.style("cursor", "pointer");

		css.id = "legend-styles";
		css.type = "text/css";

		css.innerHTML = styles.print();
		document.head.appendChild(css);
	}

	return this;
}

function format(formatFunction) {
	this._formatFunction = formatFunction;
	return this;
}

function getContainer() {
	return this._container;
}

function visible(visible_) {
	if (visible_ === undefined) return this._visible;
	this._visible = visible_;
	return this;
}

function autoTitle(value) {
	if (value === undefined) return this._auto_title;
	this._auto_title = value;
	return this;
}

function _updateTitle() {
	var _this = this;
	var title = _this._state.title_mode == "auto" ? _this.autoTitle() : _this._state.title;

	this._container.select(".fl-legend-title")
		.text(title)
		.style("display", function() {
			if (!title.trim()) return "none";
			else if (_this._state.orientation === undefined) return "inline-block";
			else return _this._state.orientation == "horizontal" ? "inline-block" : "block";
		})
		.style("padding-inline-start", 0)
		.style("padding-inline-end", small_gap);
}

function getDomain(domain_, state) {
	var domain = domain_.sort(ascending);
	var domain_min = domain[0];
	var domain_max = domain[domain.length - 1];
	var domain_mid = domain.length > 2 ? domain[1] : null;

	if (state.legend_min !== null || state.legend_max !== null) {
		if (state.legend_min !== null && state.legend_max !== null) {
			if (state.legend_min < state.legend_max) {
				domain_min = state.legend_min;
				domain_max = state.legend_max;
			}
		}
		else if (state.legend_min !== null) {
			domain_min = state.legend_min;
			if (domain_max < domain_min) domain_max = domain_min + 2;
		}
		else {
			domain_max = state.legend_max;
			if (domain_min > domain_max) domain_min = domain_max - 2;
		}
	}

	if (domain_mid !== null && (domain_min > domain_mid || domain_max < domain_mid)) domain_mid = null;

	var legend_domain = [domain_min];
	if (domain_mid !== null) legend_domain.push(domain_mid);
	legend_domain.push(domain_max);

	legend_domain.min = domain_min;
	legend_domain.max = domain_max;
	legend_domain.mid = domain_mid;

	return legend_domain;
}

export { appendTo, format, getContainer, visible, autoTitle, _updateTitle, getDomain, small_gap };
