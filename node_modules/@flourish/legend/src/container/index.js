import { select } from "d3-selection";

export var font_size, font_color, font_family, font_weight, default_text_size = 1;

var DEFAULTS = Object.freeze({
	alignment: "start",
	orientation: "horizontal",
	text_color: null,
	title_weight: "bold",
	text_weight: "normal",
	text_size: default_text_size
});

function legendContainer(state_) {
	this._state = state_;
	for (var key in DEFAULTS) { if (this._state[key] === undefined) this._state[key] = DEFAULTS[key]; }

	return this;
}

legendContainer.prototype.appendTo = function (container_) {
	this._container = select(container_).append("div").node();
	return this;
};

legendContainer.prototype.add = function (legends) {
	this._legends = Array.isArray(legends) ? legends : [legends];
	var self = this;

	this._legends.forEach(function(legend) {
		if (legend && typeof legend.appendTo == "function") legend.appendTo(self._container);
		else console.warn("Please pass in valid legend instances into .add()");
	});

	return this;
};

legendContainer.prototype.update = function () {
	// Initialize some main style elements that can be imported by the individual legend containers
	var template = window.template || undefined;
	var layout = template ? template.state.layout : undefined;
	font_color = this._state.text_color || (template && layout && layout.font_color) || "#333333";
	font_family = layout ? layout.body_font.name : window.getComputedStyle(document.body).fontFamily;
	font_size = this._state.text_size;
	font_weight = this._state.text_weight;

	this._legends.forEach(function(legend) {
		if (legend && typeof legend.update == "function") legend.update();
	});

	var is_horizontal = this._state.orientation === "horizontal";
	var alignment = this._state.alignment;
	var flex_alignment = alignment == "center" ? alignment : "flex-" + alignment;

	// ================== //
	// MAIN LEGEND STYLES //
	// ================== //

	// Styles for main legend wrapper container
	select(this._container)
		.style("justify-content", is_horizontal ? flex_alignment: null)
		.style("align-items", is_horizontal ? null : flex_alignment)
		.style("display", "flex")
		.style("flex-direction", is_horizontal ? "row": "column");

	var individual_legend_containers = select(this._container)
		.selectAll(".fl-legend-container");

	// This next section deals with the padding around the legends
	individual_legend_containers
		.style("padding-inline-end", function () {
			if (!is_horizontal) return 0;
			return "0.5rem";
		})
		.style("padding-bottom", function() {
			if (is_horizontal) return 0;
			return "0.25rem";
		})
		.style("justify-content", flex_alignment);

	// Styles for the titles of each legend
	select(this._container)
		.selectAll(".fl-legend-title")
		.style("color", this._state.text_color)
		.style("font-weight", this._state.title_weight)
		.style("font-size", font_size + "rem")
		.style("margin-right", font_size * 0.25 + "rem")
		.style("line-height", "1.25em")
		.style("margin-top", 0)
		.style("margin-bottom", 0)
		.style("text-align", alignment);


	// ============================ //
	// DISCRETE COLOR LEGEND STYLES //
	// ============================ //

	// Styles for discrete color legend items
	select(this._container).selectAll(".fl-legend-item")
		.style("display", "inline-flex")
		.style("text-align", alignment);

	// Styles discrete color legend labels
	select(this._container)
		.selectAll(".fl-legend-label")
		.style("color", this._state.text_color)
		.style("font-weight", this._state.text_weight)
		.style("font-size", font_size + "rem");

	// ===================================== //
	// CONTINUOUS SIZE & COLOR LEGEND STYLES //
	// ===================================== //

	// Styles for continuous size and color legend labels
	select(this._container)
		.selectAll(".label")
		.style("color", this._state.text_color)
		.style("font-weight", this._state.text_weight)
		.style("font-size", font_size + "rem");

	return this;
};

export default legendContainer;
